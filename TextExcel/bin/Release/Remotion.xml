<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Remotion</name>
    </assembly>
    <members>
        <member name="T:Remotion.FunctionalProgramming.EnumerableExtensions">
            <summary>
            Provides a set of <see langword="static"/> methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.First``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1})">
            <summary>
            Returns the first element of a sequence
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createEmptySequenceException"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of. Must not be <see langword="null"/>.</param>
            <param name="createEmptySequenceException">
            This callback is invoked if the sequence is empty. The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>The first element in the specified sequence.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.First``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``1})">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createNoMatchingElementException"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element of. Must not be <see langword="null"/>.</param>
            <param name="predicate">A function to test each element for a condition. Must not be <see langword="null"/>.</param>
            <param name="createNoMatchingElementException">
            This callback is invoked if the sequence is empty or no element satisfies the condition in <paramref name="predicate"/>. 
            The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.Single``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1})">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createEmptySequenceException"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the single element of. Must not be <see langword="null"/>.</param>
            <param name="createEmptySequenceException">
            This callback is invoked if the sequence is empty. 
            The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>The single element in the specified sequence.</returns>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException The specified sequence contains more than one element.</exception>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.Single``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``1})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createNoMatchingElementException"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element of. Must not be <see langword="null"/>.</param>
            <param name="predicate">A function to test each element for a condition. Must not be <see langword="null"/>.</param>
            <param name="createNoMatchingElementException">
            This callback is invoked if the sequence is empty or no element satisfies the condition in <paramref name="predicate"/>. 
            The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>The single element in the specified sequence.</returns>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException The specified sequence contains more than one element.</exception>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.CreateSequence``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Generates a sequence of elements from the <paramref name="source"/> element by applying the specified next-element function, 
            adding elements to the sequence while the current element satisfies the specified condition.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/> element.</typeparam>
            <param name="source">The object to be transformed into a sequence.</param>
            <param name="nextElementSelector">A function to retrieve the next element in the sequence. Must not be <see langword="null" />.</param>
            <param name="predicate">A function to test each element for a condition. Must not be <see langword="null" />.</param>
            <returns>
            A collection of elements containing the <paramref name="source"/> and all subsequent elements where each element satisfies a specified condition.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.CreateSequence``1(``0,System.Func{``0,``0})">
            <summary>
            Generates a sequence of elements from the <paramref name="source"/> element by applying the specified next-element function, 
            adding elements to the sequence while the current element is not <see langword="null" />.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/> element.</typeparam>
            <param name="source">The object to be transformed into a sequence.</param>
            <param name="nextElementSelector">A function to retrieve the next element in the sequence. Must not be <see langword="null" />.</param>
            <returns>
            A sequence of elements containing the <paramref name="source"/> and all subsequent elements 
            until the <paramref name="nextElementSelector"/> returns <see langword="null" />.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.CreateSequenceWithCycleCheck``2(``0,System.Func{``0,``0},System.Func{``0,``1})">
            <summary>
            Generates a sequence of elements from the <paramref name="source"/> element by applying the specified next-element function, 
            adding elements to the sequence while the current element is not <see langword="null"/>. 
            If a cycle is detected based on the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> comparer, an exception is thrown.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/> element.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createCycleFoundException"/>.</typeparam>
            <param name="source">The object to be transformed into a sequence.</param>
            <param name="nextElementSelector">A function to retrieve the next element in the sequence. Must not be <see langword="null"/>.</param>
            <param name="createCycleFoundException">
            This callback is invoked if a cycle is detected within the sequence.
            The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>
            A sequence of elements containing the <paramref name="source"/> and all subsequent elements 
            until the <paramref name="nextElementSelector"/> returns <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.CreateSequenceWithCycleCheck``2(``0,System.Func{``0,``0},System.Func{``0,System.Boolean},System.Collections.Generic.IEqualityComparer{``0},System.Func{``0,``1})">
            <summary>
            Generates a sequence of elements from the <paramref name="source"/> element by applying the specified next-element function, 
            adding elements to the sequence while the current element satisfies the specified condition. If a cycle is detected, an exception is thrown.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/> element.</typeparam>
            <typeparam name="TException">Type type of the exception returned by <paramref name="createCycleFoundException"/>.</typeparam>
            <param name="source">The object to be transformed into a sequence.</param>
            <param name="nextElementSelector">A function to retrieve the next element in the sequence. Must not be <see langword="null"/>.</param>
            <param name="predicate">A function to test each element for a condition. Must not be <see langword="null"/>.</param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used when checking if an element was already returned as part of the sequence.
            Can be <see langword="null"/> to indicate default behavior.
            </param>
            <param name="createCycleFoundException">
            This callback is invoked if a cycle is detected within the sequence.
            The returned exception is then thrown to indicate this error. Must not be <see langword="null"/>.
            </param>
            <returns>
            A collection of elements containing the <paramref name="source"/> and all subsequent elements where each element satisfies a specified condition.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether two enumerable sequences contain the same set of elements without regarding the order or number of elements.
            This method constructs a <see cref="T:System.Collections.Generic.HashSet`1"/> from <paramref name="sequence1"/> and then calls <see cref="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})"/>.
            The <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> equality comparer is used to check elements for equality.
            </summary>
            <typeparam name="T">The element type of the compared sequences.</typeparam>
            <param name="sequence1">The first sequence.</param>
            <param name="sequence2">The second sequence.</param>
            <returns><see langword="true"/> if all elements of <paramref name="sequence1"/> are present in <paramref name="sequence2"/> and all
            elements of <paramref name="sequence2"/> are present in <paramref name="sequence1"/>. Order and number of elements are not compared.</returns>
            <exception cref="T:System.ArgumentNullException">One of the sequences is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Combines two sequences into a single sequence of <see cref="T:System.Tuple`2"/> values.
            </summary>
            <typeparam name="T1">The item type of the first sequence.</typeparam>
            <typeparam name="T2">The item type of the second sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <returns>
            A "zipped" sequence, consisting of the combined elements of the <paramref name="first"/> and the <paramref name="second"/> sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">One of the parameters is null.</exception>
            <remarks>
            If the input sequences do not have the same number of arguments, the result sequence will have as many arguments as the smaller input sequence.
            </remarks>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.Interleave``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Interleaves the elements of two sequences.
            </summary>
            <typeparam name="T">The item type of the sequences.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <returns>
            An "interleaved" sequence, consisting of alternating elements of the <paramref name="first"/> and the <paramref name="second"/> sequence.
            </returns>
            <remarks>
            If the input sequences do not have the same number of arguments, the remaining items in the longer sequence will be appended.
            </remarks>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.ConvertToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an object of type <see cref="T:System.Collections.Generic.ICollection`1"/> that has the same items as the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>. If the source 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> already implements <see cref="T:System.Collections.Generic.ICollection`1"/>, the same instance is returned without any copying taking place.
            </summary>
            <typeparam name="T">The item type of the <paramref name="source"/> sequence (and the result <see cref="T:System.Collections.Generic.ICollection`1"/>).</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be returned as an <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</param>
            <returns><paramref name="source"/> if that object implements <see cref="T:System.Collections.Generic.ICollection`1"/>, otherwise a new collection with the same items
            as <paramref name="source"/>.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns a sequence that has the same elements as the given <paramref name="source"/> sequence, with the given <paramref name="item"/> appended
            to the end. This method is similar to <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>, but allows a single item to be appended to the sequence.
            </summary>
            <typeparam name="T">The element type of the <paramref name="source"/> sequence.</typeparam>
            <param name="source">The sequence to which a new item should be appended.</param>
            <param name="item">The item to be appended.</param>
            <returns>
            A lazy sequence that first enumerates the items from the <paramref name="source"/> sequence, then yields the <paramref name="item"/>.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.SingleOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1})">
            <summary>
            Works like <see cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/> but throws a custom
            exception if the sequence contains more than one element.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="createMultipleElementsException">The exception provider.</param>
            <returns></returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.SingleOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``1})">
            <summary>
            Works like <see cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
            but throws a custom exception if the sequence contains more than one matching element.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="predicate">The predicate applied to the sequence.</param>
            <param name="createMultipleMatchingElementsException">The exception provider.</param>
            <returns></returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableExtensions.ApplySideEffect``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Returns a sequence that lazily applies a side effect to each item of a source sequence.
            </summary>
            <typeparam name="T">The item type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="sideEffect">The side effect to apply to each item.</param>
            <returns>A sequence containing the same items as the <paramref name="source"/> sequence that lazily applies the given 
            <paramref name="sideEffect"/> to each item while the sequence is enumerated.</returns>
            <remarks>
            This method is used to associate a side effect with an enumerable sequence. One use case is to add consistency checks to the items of a 
            sequence that are executed when the sequence is enumerated. 
            </remarks>
        </member>
        <member name="T:Remotion.FunctionalProgramming.EnumerableUtility">
            <summary>
            Provides helper functions for <see cref="T:System.Collections.Generic.IEnumerable`1"/> objects.
            </summary>
            <remarks>
            Most of these methods will become obsolete with C# 3.0/LINQ.
            </remarks>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableUtility.Combine``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequences into a single sequence.
            </summary>
            <typeparam name="T">The item type of the sequences to combine.</typeparam>
            <param name="sources">The source sequences to combine.</param>
            <returns>A single sequence yielding the items of each source sequence in the same order in which they were passed via the 
            <paramref name="sources"/> parameter.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableUtility.Singleton``1(``0)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing <paramref name="item"/> as its single element.
            </summary>
            <typeparam name="TItem">The type of the <paramref name="item"/> element.</typeparam>
            <param name="item">The object to be added to the sequence. Can be <see langword="null"/>.</param>
            <returns>A sequence containing only the <paramref name="item"/> element.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.EnumerableUtility.SelectRecursiveDepthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Recursively select items from a tree data structure defined by a start element and a child selector function. 
            Iterating the resulting sequence performs a depth-first traversal of the data structure.
            </summary>
            <typeparam name="T">The item type to select.</typeparam>
            <param name="start">The item to start with.</param>
            <param name="childrenSelector">A selector function that returns the child items of a given parent item.</param>
            <returns>A sequence containing all items in the tree in a depth-first order.</returns>
        </member>
        <member name="T:Remotion.FunctionalProgramming.Maybe">
            <summary>
            Provides non-generic helper methods for the <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> type.
            </summary>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe.ForValue``1(``0)">
            <summary>
            Creates a <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance for the given value, which can be <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="valueOrNull"/>.</typeparam>
            <param name="valueOrNull">The value. Can be <see langword="null"/>, in which case <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> is returned.</param>
            <returns><see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if <paramref name="valueOrNull"/> is <see langword="null"/>; otherwise an instance of 
            <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> that encapsulates the given <paramref name="valueOrNull"/>.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe.ForValue``1(System.Nullable{``0})">
            <summary>
            Creates a <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance for the given <paramref name="nullableValue"/>, unwrapping a nullable value type.
            </summary>
            <typeparam name="T">The underlying type of the <paramref name="nullableValue"/>.</typeparam>
            <param name="nullableValue">
              The nullable value. Can be <see langword="null"/>, in which case <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> is returned.
            </param>
            <returns><see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if <paramref name="nullableValue"/> is <see langword="null"/>; otherwise an instance of 
            <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> that encapsulates the underlying value of <paramref name="nullableValue"/>.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe.ForCondition``1(System.Boolean,``0)">
            <summary>
            Creates a <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance for the given value, which can be <see langword="null"/>, if a boolean condition evaluates to
            <see langword="true"/>. If it evaluates to <see langword="false"/>, <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> is returned.
            </summary>
            <typeparam name="T">The type of the <paramref name="valueIfTrue"/>.</typeparam>
            <param name="condition">The condition to check. If <see langword="false"/>, <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> is returned.</param>
            <param name="valueIfTrue">The value. Can be <see langword="null"/>, in which case <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> is returned.</param>
            <returns>
            	<see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if <paramref name="valueIfTrue"/> is <see langword="null"/> or <paramref name="condition"/> is 
            	<see langword="false"/>; otherwise an instance of <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> that encapsulates the given <paramref name="valueIfTrue"/>.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe.ForCondition``1(System.Boolean,System.Nullable{``0})">
            <summary>
            Creates a <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance for the given value, unwrapping a nullable value type, if a boolean condition evaluates to
            <see langword="true"/>. If it evaluates to <see langword="false"/>, <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> is returned.
            </summary>
            <typeparam name="T">The underlying type of the <paramref name="nullableValueIfTrue"/>.</typeparam>
            <param name="condition">The condition to check. If <see langword="false"/>, <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> is returned.</param>
            <param name="nullableValueIfTrue">
              The nullable value. Can be <see langword="null"/>, in which case <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> is returned.
              </param>
            <returns>
            	<see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if <paramref name="nullableValueIfTrue"/> is <see langword="null"/> or <paramref name="condition"/> is 
            	<see langword="false"/>; otherwise an instance of <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> that encapsulates the underlying value of 
            	<paramref name="nullableValueIfTrue"/>.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe.EnumerateValues``1(System.Collections.Generic.IEnumerable{Remotion.FunctionalProgramming.Maybe{``0}})">
            <summary>
            Enumerates the values of a number of <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instances. <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instances that have no values are ignored.
            </summary>
            <typeparam name="T">The value type of the <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> values.</typeparam>
            <param name="maybeValues">The maybe instances to enumerate the values of. <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instances that have no values are ignored.</param>
            <returns>An enumerable sequence containing all non-<see langword="null"/> values</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe.EnumerateValues``1(Remotion.FunctionalProgramming.Maybe{``0}[])">
            <summary>
            Enumerates the values of a number of <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instances. <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instances that have no values are ignored.
            </summary>
            <typeparam name="T">The value type of the <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> values.</typeparam>
            <param name="maybeValues">The maybe instances to enumerate the values of. <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instances that have no values are ignored.</param>
            <returns>An enumerable sequence containing all non-<see langword="null"/> values</returns>
        </member>
        <member name="T:Remotion.FunctionalProgramming.Maybe`1">
            <summary>
            Encapsulates a value that may be <see langword="null" />, providing helpful methods to avoid <see langword="null" /> checks.
            </summary>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> struct.
            </summary>
            <param name="value">
            The value. If the value is <see langword="null"/>, the created instance will compare equal to <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/>.
            </param>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.ToString">
            <summary>
            Provides a human-readable representation of this instance.
            </summary>
            <returns>
            A human-readable representation of this instance.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.ValueOrDefault">
            <summary>
            Gets the value held by this instance, or the default value of <typeparamref name="T"/> if this instance does not have a value.
            </summary>
            <returns>The value held by this instance, or the default value of <typeparamref name="T"/> if this instance does not have a value.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.ValueOrDefault(`0)">
            <summary>
            Gets the value held by this instance, or the <paramref name="defaultValue"/> if this instance does not have a value.
            </summary>
            <param name="defaultValue">The default value returned if this instance does not have a value.</param>
            <returns>The value held by this instance, or the <paramref name="defaultValue"/> if this instance does not have a value.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.Value">
            <summary>
            Gets the value held by this instance. An exception is thrown if this instance does not have a value.
            </summary>
            <returns>The value held by this instance. An exception is thrown if this instance does not have a value.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Remotion.FunctionalProgramming.Maybe`1.HasValue"/> property is <see langword="false"/>.</exception>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.Do(System.Action{`0})">
            <summary>
            Executes the specified action if this instance has a value. Otherwise, the action is not performed.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.Do(System.Action{`0},System.Action)">
            <summary>
            Executes the specified action if this instance has a value. Otherwise, a different action is performed.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="otherwise">The action to execute if this instance doesn't have a value.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.OtherwiseDo(System.Action)">
            <summary>
            Executes the specified action if this instance doesn't have a value. If it does, the action is not performed.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.Select``1(System.Func{`0,``0})">
            <summary>
            Selects another value from this instance. If this instance does not have a value, the selected value is <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/>.
            Otherwise, the selected value is retrieved via a selector function.
            </summary>
            <typeparam name="TR">The type of the value to be selected.</typeparam>
            <param name="selector">The selector function. This function is only executed if this instance has a value.</param>
            <returns><see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if this instance has no value or <paramref name="selector"/> returns <see langword="null"/>; 
            otherwise, a new <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance holding the value returned by <paramref name="selector"/>.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.SelectMany``2(System.Func{`0,Remotion.FunctionalProgramming.Maybe{``0}},System.Func{`0,``0,``1})">
            <summary>
            Combines a <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> value with another <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> value, returning <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> unless both
            <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instances have a value.
            </summary>
            <typeparam name="TOther">The type stored by the other maybe instance to combine this instance with.</typeparam>
            <typeparam name="TResult">The type of the combined values.</typeparam>
            <param name="otherMaybeSelector">A selector function that returns the other <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance to combine this instance with. 
            This function is only executed if this instance has a value.</param>
            <param name="resultSelector">A function selecting the resulting value from the value of this instance and the value of the other 
            <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance.</param>
            <returns><see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if this instance does not have a value, <paramref name="otherMaybeSelector"/> returns <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/>,
            or <paramref nane="resultSelector"/> returns <see langword="null"/>. Otherwise, the result of <paramref name="resultSelector"/> applied
            to the value held by this instance and the value held by the <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance returned by <paramref name="otherMaybeSelector"/>.
            </returns>
            <remarks>
            This method enables LINQ-style queries with multiple from clauses.
            <example>
            <code>
            var r = from s in Maybe.ForValue (stringValue)
                    from i in Maybe.ForValue (intValue)
                    let j = s.Length + i
                    where j &gt; 100
                    select new { i, s };
            r.Do (tuple =&gt; Console.WriteLine (tuple.i + "/" + tuple.s), () =&gt; Console.WriteLine ("Nothing!"));
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.Select``1(System.Func{`0,System.Nullable{``0}})">
            <summary>
            Selects a nullable value from this instance. If this instance does not have a value, the selected value is <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/>.
            Otherwise, the selected value is retrieved via a selector function.
            </summary>
            <typeparam name="TR">The type of the value to be selected.</typeparam>
            <param name="selector">The selector function. This function is only executed if this instance has a value. Its return value is unwrapped
            into the underlying type.</param>
            <returns><see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if this instance has no value or <paramref name="selector"/> returns <see langword="null"/>; 
            otherwise, a new <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance holding the non-nullable value returned by <paramref name="selector"/>.
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.OtherwiseSelect(System.Func{`0})">
            <summary>
            Selects a new value if this instance does not have a value.
            If it already has a value, that value is retained.
            </summary>
            <param name="selector">The selector function. This function is only executed if this instance doesn't have a value.</param>
            <returns>This <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance if it holds a value. Otherwise, a new <see cref="T:Remotion.FunctionalProgramming.Maybe`1"/> instance holding the result of 
            the <paramref name="selector"/> (or <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if the selector returned <see langword="null"/>).
            </returns>
        </member>
        <member name="M:Remotion.FunctionalProgramming.Maybe`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            Checks the given predicate, returning this instance if the predicate is <see langword="true"/>, or <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if the predicate is 
            <see langword="false"/>. If this instance does not have a value, <see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> is immediately returned and the predicate is not
            evaluated.
            </summary>
            <param name="predicate">The predicate to check. This is only evaluated if this instance has a value.</param>
            <returns><see cref="F:Remotion.FunctionalProgramming.Maybe`1.Nothing"/> if this instance does not have a value or the <paramref name="predicate"/> returns <see langword="false"/>;
            otherwise, this instance.</returns>
        </member>
        <member name="P:Remotion.FunctionalProgramming.Maybe`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has a value.
            </summary>
            <value>
            	<see langword="true"/> if this instance has a value; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function definition table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using "halt" (or "void"/"nothing", which is the same) for method output means that methos doesn't return normally. <br/>
            "canbenull" annotation is only applicable for output parameters. <br/>
            You can use multiple [ContractAnnotation] for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item>[ContractAnnotation("=> halt")] public void TerminationMethod()</item>
            <item>[ContractAnnotation("halt &lt;= condition: false")] public void Assert(bool condition, string text) // Regular Assertion method</item>
            <item>[ContractAnnotation("s:null => true")] public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty</item>
            <item>[ContractAnnotation("null => null; notnull => notnull")] public object Transform(object data) // Method which returns null if parameter is null, and not null if parameter is not null</item>
            <item>[ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")] public bool TryParse(string s, out Person result)</item>
            </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is *pure* linq method, with postponed enumeration. C# iterator methods (yield ...) are always LinqTunnel.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class with
            <see cref="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumarable, passed as parameter, is not enumerated.
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
            Indicates that the function is used to notify class type property value is changed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that method doesn't contain observable side effects.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ArgumentUtility">
            <summary>
            This utility class provides methods for checking arguments.
            </summary>
            <remarks>
            Some methods of this class return the value of the parameter. In some cases, this is useful because the value will be converted to another 
            type:
            <code><![CDATA[
            void foo (object o) 
            {
              int i = ArgumentUtility.CheckNotNullAndType<int> ("o", o);
            }
            ]]></code>
            In some other cases, the input value is returned unmodified. This makes it easier to use the argument checks in calls to base class constructors
            or property setters:
            <code><![CDATA[
            class MyType : MyBaseType
            {
              public MyType (string name) : base (ArgumentUtility.CheckNotNullOrEmpty ("name", name))
              {
              }
            
              public override Name
              {
                set { base.Name = ArgumentUtility.CheckNotNullOrEmpty ("value", value); }
              }
            }
            ]]></code>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckNotNullAndType``1(System.String,System.Object)">
            <summary>Returns the value itself if it is not <see langword="null"/> and of the specified value type.</summary>
            <typeparam name="TExpected"> The type that <paramref name="actualValue"/> must have. </typeparam>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actualValue"/> is a <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="actualValue"/> is an instance of another type.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.DebugCheckNotNullAndType(System.String,System.Object,System.Type)">
            <summary>Checks of the <paramref name="actualValue"/> is of the <paramref name="expectedType"/>.</summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actualValue"/> is a <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="actualValue"/> is an instance of another type.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckType``1(System.String,System.Object)">
            <summary>Returns the value itself if it is of the specified type.</summary>
            <typeparam name="TExpected"> The type that <paramref name="actualValue"/> must have. </typeparam>
            <exception cref="T:System.ArgumentException"> 
                <paramref name="actualValue"/> is an instance of another type (which is not a subtype of <typeparamref name="TExpected"/>).</exception>
            <exception cref="T:System.ArgumentNullException"> 
                <paramref name="actualValue"/> is null and <typeparamref name="TExpected"/> cannot be null. </exception>
            <remarks>
              For non-nullable value types, you should use either <see cref="M:Remotion.Utilities.ArgumentUtility.CheckNotNullAndType``1(System.String,System.Object)"/> or pass the type 
              <see cref="T:System.Nullable`1"/> instead.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckNotNullAndTypeIsAssignableFrom(System.String,System.Type,System.Type)">
            <summary>Checks whether <paramref name="actualType"/> is not <see langword="null"/> and can be assigned to <paramref name="expectedType"/>.</summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actualType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="actualType"/> cannot be assigned to <paramref name="expectedType"/>.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckTypeIsAssignableFrom(System.String,System.Type,System.Type)">
            <summary>Checks whether <paramref name="actualType"/> can be assigned to <paramref name="expectedType"/>.</summary>
            <exception cref="T:System.ArgumentException">The <paramref name="actualType"/> cannot be assigned to <paramref name="expectedType"/>.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.DebugCheckTypeIsAssignableFrom(System.String,System.Type,System.Type)">
            <summary>Checks whether <paramref name="actualType"/> can be assigned to <paramref name="expectedType"/>.</summary>
            <exception cref="T:System.ArgumentException">The <paramref name="actualType"/> cannot be assigned to <paramref name="expectedType"/>.</exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckItemsType``1(System.String,``0,System.Type)">
            <summary>Checks whether all items in <paramref name="collection"/> are of type <paramref name="itemType"/> or a null reference.</summary>
            <exception cref="T:System.ArgumentException"> If at least one element is not of the specified type or a derived type. </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckItemsNotNullAndType``1(System.String,``0,System.Type)">
            <summary>Checks whether all items in <paramref name="collection"/> are of type <paramref name="itemType"/> and not null references.</summary>
            <exception cref="T:System.ArgumentException"> If at least one element is not of the specified type or a derived type. </exception>
            <exception cref="T:System.ArgumentNullException"> If at least one element is a null reference. </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckValidEnumValue(System.String,System.Enum)">
            <summary>Checks whether <paramref name="enumValue"/> is defined within its enumeration type.</summary>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="enumValue"/> is a null reference. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If <paramref name="enumValue"/> has a numeric value that is not completely defined within its 
            enumeration type. For flag types, every bit must correspond to at least one enumeration value. </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckValidEnumValueAndType``1(System.String,System.Object)">
            <summary>Checks whether <paramref name="enumValue"/> is of the enumeration type <typeparamref name="TEnum"/> and defined within this type.</summary>
            <remarks>
            When successful, the value is returned as a <c>Nullable</c> of the specified type for direct assignment. 
            </remarks>
            <exception cref="T:System.ArgumentException"> If <paramref name="enumValue"/> is not of the specified type. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If <paramref name="enumValue"/> has a numeric value that is not completely defined within its 
            enumeration type. For flag types, every bit must correspond to at least one enumeration value. </exception>
        </member>
        <member name="M:Remotion.Utilities.ArgumentUtility.CheckValidEnumValueAndTypeAndNotNull``1(System.String,System.Object)">
            <summary>Checks whether <paramref name="enumValue"/> is of the enumeration type <typeparamref name="TEnum"/>, is defined within this 
            type, and is not a null reference.</summary>
            <remarks>
            When successful, the value is returned as the specified type for direct assignment. 
            </remarks>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="enumValue"/> is a null reference. </exception>
            <exception cref="T:System.ArgumentException"> If <paramref name="enumValue"/> is not of the specified type. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If <paramref name="enumValue"/> has a numeric value that is not completely defined within its 
            enumeration type. For flag types, every bit must correspond to at least one enumeration value. </exception>
        </member>
        <member name="T:Remotion.Utilities.Assertion">
            <summary>
            Provides methods that throw an <see cref="T:System.InvalidOperationException"/> if an assertion fails.
            </summary>
            <remarks>
              <para>
              This class contains methods that are conditional to the DEBUG and TRACE attributes (<see cref="M:Remotion.Utilities.Assertion.DebugAssert(System.Boolean)"/> and <see cref="M:Remotion.Utilities.Assertion.TraceAssert(System.Boolean)"/>). 
              </para><para>
              Note that assertion expressions passed to these methods are not evaluated (read: executed) if the respective symbol are not defined during
              compilation, nor are the methods called. This increases performance for production builds, but make sure that your assertion expressions do
              not cause any side effects! See <see cref="T:System.Diagnostics.ConditionalAttribute"/> or <see cref="T:System.Diagnostics.Debug"/> and <see cref="T:System.Diagnostics.Trace"/> the for more information 
              about conditional compilation.
              </para><para>
              Assertions are no replacement for checking input parameters of public methods (see <see cref="T:Remotion.Utilities.ArgumentUtility"/>).  
              </para>
            </remarks>
        </member>
        <member name="T:Remotion.Utilities.AttributeUtility">
            <summary>
            Utility class for finding custom attributes via their type or an interface implemented by the type.
            </summary>
            <summary>
            Utility class for finding custom attributes via their type or an interface implemented by the type.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.EqualityUtility">
            <summary>
            Provides methods for determining equality and hash codes.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.SafeGetHashCode``1(``0)">
            <summary>
            Gets an object's hash code or null, if the object is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``2(``0,``1)">
            <summary>
              Gets the hash code of the individual arguments, XOR'd with bits rotated.
            </summary>
            <remarks>
              <para>
                This method XOR's the hash codes of all individual arguments in order to create a compound hash code
                for the entire set of arguments. Between XOR's, the compound hash code is rotated by 11 bits in order
                to better distribute hash codes of types that aggregate their hash results toward the least-significant
                side of the result (small numbers, booleans).
              </para>
              <para>
                Overloads with type arguments are identical to the object-array version, they only reduce the amount
                of boxing going on (better performance).
              </para>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``3(``0,``1,``2)">
            <inheritdoc cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``2(``0,``1)"/>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``4(``0,``1,``2,``3)">
            <inheritdoc cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``2(``0,``1)"/>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``5(``0,``1,``2,``3,``4)">
            <inheritdoc cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``2(``0,``1)"/>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``6(``0,``1,``2,``3,``4,``5)">
            <inheritdoc cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``2(``0,``1)"/>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``7(``0,``1,``2,``3,``4,``5,``6)">
            <inheritdoc cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``2(``0,``1)"/>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode(System.Object[])">
            <inheritdoc cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode``2(``0,``1)"/>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode(System.Collections.IEnumerable)">
            <summary>
            Gets the rotated hash code for an enumeration of objects.
            </summary>
            <param name="objects">The objects whose combined hash code should be calculated.</param>
            <returns>The rotate-combined hash codes of the <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objects"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.GetXorHashCode(System.Collections.IEnumerable)">
            <summary>
            Gets a hash code for the given enumerable. The hash code is calculated by combining the hash codes of the enumerated objects using the
            XOR operation. This is usually suboptimal to <see cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode(System.Collections.IEnumerable)"/> unless the ordering of enumerated objects
            should explicitly be ignored.
            </summary>
            <param name="objects">The object enumeration for which a hash code should be calculated.</param>
            <returns>The combined hash code of all objects in the enumeration.</returns>
            <remarks>For a given set of objects, this method will always return the same value, regardless of the objects' order.</remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.EqualsEquatable``1(``0,``0)">
            <summary>
            Returns whether two equatable objects are equal.
            </summary>
            <remarks>
            Similar to <see cref="M:Remotion.Utilities.EqualityUtility.Equals``1(``0,``0)"/>, but without any boxing (better performance). 
            Equatable objects implement the <see cref="T:System.IEquatable`1"/> interface. 
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.EqualsEquatable``1(``0,System.Object)">
            <summary>
            Returns whether an equatable object equals another object.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.EqualsEquatableValue``1(``0,System.Object)">
            <summary>
            Returns whether an equatable value-type object equals another object.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EqualityUtility.Equals``1(``0,``0)">
            <summary>
            Returns whether two objects are equal.
            </summary>
            <remarks>
            Similar to <see cref="M:System.Object.Equals(System.Object,System.Object)"/>, only with less boxing going on (better performance).
            </remarks>
        </member>
        <member name="T:Remotion.Utilities.FileUtility">
            <summary>
            Provides utility operations for File-IO.
            </summary>
            <remarks>
            Deleting files in Windows can be an asynchronous operation if the system is already busy. The following code is an example that can result in 
            an exception because the file <c>a.txt</c> has not yet been deleted when the copy-operation is attempted.
            <code>
            File.Delete (@"C:\temp\a.txt")
            File.Copy (@"C:\temp\b.txt", @"C:\temp\a.txt")
            </code>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.FileUtility.WriteEmbeddedStringResourceToFile(System.Type,System.String,System.String)">
            <summary>
            Writes a string resource embedded in an assemby into a file with the passed filename.
            </summary>
            <param name="typeWhoseNamespaceTheStringResourceResidesIn"><see cref="T:System.Type"/> in whose assembly and namespace the string resource is located.</param>
            <param name="stringResourceName">Name of the string resource, relative to namespace of the passed <see cref="T:System.Type"/>.</param>
            <param name="filePath">The path of the file the string resource will be written into.</param>
        </member>
        <member name="T:Remotion.Utilities.MemberInfoEqualityComparer`1">
            <summary>
            Provides logic to compare two <see cref="T:System.Reflection.MemberInfo"/> for logical equality, without considering the <see cref="P:System.Reflection.MemberInfo.ReflectedType"/>.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.MemberInfoEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Checks two <see cref="T:System.Reflection.MemberInfo"/> instances for logical equality, without considering the <see cref="P:System.Reflection.MemberInfo.ReflectedType"/>.
            </summary>
            <param name="one">The left-hand side <see cref="T:System.Reflection.MemberInfo"/> to compare.</param>
            <param name="two">The right-hand side <see cref="T:System.Reflection.MemberInfo"/> to compare.</param>
            <returns>
            <para>
            True if the two <see cref="T:System.Reflection.MemberInfo"/> objects are logically equivalent, ie., if they represent the same <see cref="T:System.Reflection.MemberInfo"/>.
            This is very similar to the <see cref="M:System.Object.Equals(System.Object)"/> implementation of <see cref="T:System.Reflection.MemberInfo"/> objects, but it ignores the
            <see cref="P:System.Reflection.MemberInfo.ReflectedType"/> property. In effect, two members compare equal if they are declared by the same type and
            denote the same member on that type. For generic <see cref="T:System.Reflection.MethodInfo"/> objects, the generic arguments must be the same.
            </para>
            <para>
            The idea for this method, but not the code, was taken from http://blogs.msdn.com/b/kingces/archive/2005/08/17/452774.aspx.
            </para>
            </returns>
        </member>
        <member name="M:Remotion.Utilities.MemberInfoEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns the hash code for the given <see cref="T:System.Reflection.MemberInfo"/>. To calculate the hash code, the hash codes of the declaring type, 
            metadata token and module of the <see cref="T:System.Reflection.MemberInfo"/> are combined. If the declaring type is an array, the name of the 
            <see cref="T:System.Reflection.MemberInfo"/> is used instead of the metadata token.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> for which the hash code should be calculated.</param>
            <returns>The calculated hash code of the <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="T:Remotion.Utilities.MemberInfoFromExpressionUtility">
            <summary>
            Provides typed access to the reflection objects for members referenced in <see cref="T:System.Linq.Expressions.Expression"/> instances.
            </summary>
            <remarks>
            Note that this utility just extracts the <see cref="T:System.Reflection.MemberInfo"/> instance referenced in the expression.
            For methods and properties the returned object might be different from the one specified by the user.
            This is because the C# compiler always puts the base definition of overriding methods and properties into the expression.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.NullableTypeUtility.IsNullableType(System.Type)">
            <summary>
            Determines whether a type is nullable, ie. whether variables of it can be assigned <see langword="null"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            true if <paramref name="type"/> is nullable; otherwise, false.
            </returns>
            <remarks>
            A type is nullable if it is a reference type or a nullable value type. This method returns false only for non-nullable value types.
            </remarks>
        </member>
        <member name="T:Remotion.Utilities.ReferenceEqualityComparer`1">
            <summary>      
            An equality comparer that compares equality using ReferenceEquals rather than Equals. This is to ensure that two objects are actually the same 
            and not just equal for reference checking purposes.      
            </summary>      
            <typeparam name="T">the type of object to check</typeparam>  
        </member>
        <member name="T:Remotion.Collections.CacheFactory">
            <summary>
            The <see cref="T:Remotion.Collections.CacheFactory"/> provides factory methods to create new caches.
            </summary>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.Create``2">
            <summary>
            Creates a <see cref="T:Remotion.Collections.Cache`2"/> instance that is not thread-safe and uses the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <returns>
            A <see cref="T:Remotion.Collections.Cache`2"/> instance for storing keys and values.
            </returns>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.Create``2(Remotion.Collections.InvalidationToken)">
            <summary>
            Creates a <see cref="T:Remotion.Collections.Cache`2"/> instance that is not thread-safe and uses the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="invalidationToken">The <see cref="T:Remotion.Collections.InvalidationToken"/> that can be used to signal a cache invalidation. Must not be <see langword="null"/>.</param>
            <returns>
            A <see cref="T:Remotion.Collections.Cache`2"/> instance for storing keys and values.
            </returns>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.Cache`2"/> instance that is not thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <returns>
            A <see cref="T:Remotion.Collections.Cache`2"/> instances for storing keys and values.
            </returns>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.Create``2(Remotion.Collections.InvalidationToken,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.Cache`2"/> instance that is not thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="invalidationToken">The <see cref="T:Remotion.Collections.InvalidationToken"/> that can be used to signal a cache invalidation. Must not be <see langword="null"/>.</param>
            <param name="comparer">The comparer to use for comparing keys. Can be <see langword="null"/>.</param>
            <returns>
            A <see cref="T:Remotion.Collections.Cache`2"/> instances for storing keys and values.
            </returns>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.CreateWithLocking``2">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LockingCacheDecorator`2"/> instance that is thread-safe and uses the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <returns>
            A <see cref="T:Remotion.Collections.LockingCacheDecorator`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access. It is well-suited
            for caches in which the factory delegates passed to <see cref="M:Remotion.Collections.ICache`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> only take a short time to 
            complete. When the factory delegates take a long time to execute, consider using <see cref="M:Remotion.Collections.CacheFactory.CreateWithLazyLocking``2"/> instead 
            to reduce contention.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.CreateWithLocking``2(Remotion.Collections.LockingInvalidationToken)">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LockingCacheDecorator`2"/> instance that is thread-safe and uses the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="invalidationToken">The <see cref="T:Remotion.Collections.LockingInvalidationToken"/> that can be used to signal a cache invalidation. Must not be <see langword="null"/>.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LockingCacheDecorator`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access. It is well-suited
            for caches in which the factory delegates passed to <see cref="M:Remotion.Collections.ICache`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> only take a short time to 
            complete. When the factory delegates take a long time to execute, consider using <see cref="M:Remotion.Collections.CacheFactory.CreateWithLazyLocking``2"/> instead 
            to reduce contention.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.CreateWithLocking``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LockingCacheDecorator`2"/> instance that is thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LockingCacheDecorator`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access. It is well-suited
            for caches in which the factory delegates passed to <see cref="M:Remotion.Collections.ICache`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> only take a short time to 
            complete. When the factory delegates take a long time to execute, consider using 
            <see cref="M:Remotion.Collections.CacheFactory.CreateWithLazyLocking``2(System.Collections.Generic.IEqualityComparer{``0})"/> instead to reduce contention.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.CreateWithLocking``2(Remotion.Collections.LockingInvalidationToken,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LockingCacheDecorator`2"/> instance that is thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="invalidationToken">The <see cref="T:Remotion.Collections.LockingInvalidationToken"/> that can be used to signal a cache invalidation. Must not be <see langword="null"/>.</param>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LockingCacheDecorator`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access. It is well-suited
            for caches in which the factory delegates passed to <see cref="M:Remotion.Collections.ICache`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> only take a short time to 
            complete. When the factory delegates take a long time to execute, consider using 
            <see cref="M:Remotion.Collections.CacheFactory.CreateWithLazyLocking``2(System.Collections.Generic.IEqualityComparer{``0})"/> instead to reduce contention.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.CreateWithLazyLocking``2">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LazyLockingCachingAdapter`2"/> instance that is thread-safe and uses the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <returns>
            A <see cref="T:Remotion.Collections.LazyLockingCachingAdapter`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access and additional, 
            double-checked locks (see <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>) to protect each single value. It is well-suited for caches
            in which the factory delegates passed to <see cref="M:Remotion.Collections.ICache`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> take a long time to execute. When the factory
            delegates do not take a long time, consider using <see cref="M:Remotion.Collections.CacheFactory.CreateWithLocking``2"/> instead to reduce the number of locks used.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.CreateWithLazyLocking``2(Remotion.Collections.LockingInvalidationToken)">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LazyLockingCachingAdapter`2"/> instance that is thread-safe and uses the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="invalidationToken">The <see cref="T:Remotion.Collections.LockingInvalidationToken"/> that can be used to signal a cache invalidation. Must not be <see langword="null"/>.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LazyLockingCachingAdapter`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access and additional, 
            double-checked locks (see <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>) to protect each single value. It is well-suited for caches
            in which the factory delegates passed to <see cref="M:Remotion.Collections.ICache`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> take a long time to execute. When the factory
            delegates do not take a long time, consider using <see cref="M:Remotion.Collections.CacheFactory.CreateWithLocking``2"/> instead to reduce the number of locks used.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.CreateWithLazyLocking``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LazyLockingCachingAdapter`2"/> instance that is thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LazyLockingCachingAdapter`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access and additional,
            double-checked locks (see <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>) to protect each single value. It is well-suited for caches
            in which the factory delegates passed to <see cref="M:Remotion.Collections.ICache`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> take a long time to execute. When the factory
            delegates do not take a long time, consider using 
            <see cref="M:Remotion.Collections.CacheFactory.CreateWithLocking``2(System.Collections.Generic.IEqualityComparer{``0})"/> instead to reduce the number of locks used.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.CacheFactory.CreateWithLazyLocking``2(Remotion.Collections.LockingInvalidationToken,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LazyLockingCachingAdapter`2"/> instance that is thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="invalidationToken">The <see cref="T:Remotion.Collections.LockingInvalidationToken"/> that can be used to signal a cache invalidation. Must not be <see langword="null"/>.</param>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LazyLockingCachingAdapter`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access and additional,
            double-checked locks (see <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>) to protect each single value. It is well-suited for caches
            in which the factory delegates passed to <see cref="M:Remotion.Collections.ICache`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> take a long time to execute. When the factory
            delegates do not take a long time, consider using 
            <see cref="M:Remotion.Collections.CacheFactory.CreateWithLocking``2(System.Collections.Generic.IEqualityComparer{``0})"/> instead to reduce the number of locks used.
            </remarks>
        </member>
        <member name="T:Remotion.Collections.InvalidationToken">
            <summary>The <see cref="T:Remotion.Collections.InvalidationToken"/> can be used as a means to commicate that the cached information is no longer current.</summary>
            <remarks>
            Use <see cref="M:Remotion.Collections.InvalidationToken.GetCurrent"/> to get the current revision and provide it to <see cref="M:Remotion.Collections.InvalidationToken.IsCurrent(Remotion.Collections.InvalidationToken.Revision)"/> when checking whether the revision is still current.
            Invoke <see cref="M:Remotion.Collections.InvalidationToken.Invalidate"/> to signal a cache invalidation.
            <note type="caution">
            If the <see cref="T:Remotion.Collections.InvalidationToken.Revision"/> is part of a serialized instance, the associated <see cref="T:Remotion.Collections.InvalidationToken"/> must also be serialized.
            </note>
            </remarks>
            <seealso cref="T:Remotion.Collections.LockingInvalidationToken"/>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Remotion.Collections.InvalidationToken.Create">
            <summary>
            Creates a non-threadsafe version of the <see cref="T:Remotion.Collections.InvalidationToken"/> class.
            </summary>
        </member>
        <member name="M:Remotion.Collections.InvalidationToken.CreatWithLocking">
            <summary>
            Creates a threadsafe version of the <see cref="T:Remotion.Collections.InvalidationToken"/> class.
            </summary>
        </member>
        <member name="T:Remotion.Collections.InvalidationToken.Revision">
            <summary>Represents a cache revision for the <see cref="T:Remotion.Collections.InvalidationToken"/> from which it was created.</summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Remotion.Collections.InvalidationTokenImplementation">
            <summary>
            The <see cref="T:Remotion.Collections.InvalidationTokenImplementation"/> is the non-threadsafe implementation of the <see cref="T:Remotion.Collections.InvalidationToken"/> class.
            </summary>
            <remarks>Instantiate via <see cref="T:Remotion.Collections.InvalidationToken"/>.<see cref="M:Remotion.Collections.InvalidationToken.Create"/>.</remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Remotion.Collections.CollectionExtensions">
            <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.ICollection`1"/> interface.
            </summary>
        </member>
        <member name="T:Remotion.Collections.DataStoreFactory">
            <summary>
            The <see cref="T:Remotion.Collections.DataStoreFactory"/> provides factory methods to create new data stores.
            </summary>
        </member>
        <member name="M:Remotion.Collections.DataStoreFactory.Create``2">
            <summary>
            Creates a <see cref="T:Remotion.Collections.SimpleDataStore`2"/> instance that is not thread-safe and uses the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <returns>
            A <see cref="T:Remotion.Collections.SimpleDataStore`2"/> instances for storing keys and values.
            </returns>
        </member>
        <member name="M:Remotion.Collections.DataStoreFactory.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.SimpleDataStore`2"/> instance that is not thread-safe and uses the specifiede
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <returns>
            A <see cref="T:Remotion.Collections.SimpleDataStore`2"/> instances for storing keys and values.
            </returns>
        </member>
        <member name="M:Remotion.Collections.DataStoreFactory.CreateWithLocking``2">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LockingDataStoreDecorator`2"/> instance that is thread-safe and uses the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <returns>
            A <see cref="T:Remotion.Collections.LockingDataStoreDecorator`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access. It is well-suited
            for data stores in which the factory delegates passed to <see cref="M:Remotion.Collections.IDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> only take a short time to 
            complete. When the factory delegates take a long time to execute, consider using <see cref="M:Remotion.Collections.DataStoreFactory.CreateWithLazyLocking``2"/> instead 
            to reduce contention.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.DataStoreFactory.CreateWithLocking``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LockingDataStoreDecorator`2"/> instance that is thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LockingDataStoreDecorator`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access. It is well-suited
            for data stores in which the factory delegates passed to <see cref="M:Remotion.Collections.IDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> only take a short time to 
            complete. When the factory delegates take a long time to execute, consider using <see cref="M:Remotion.Collections.DataStoreFactory.CreateWithLazyLocking``2(System.Collections.Generic.IEqualityComparer{``0})"/> instead 
            to reduce contention.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.DataStoreFactory.CreateWithLazyLocking``2">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LazyLockingDataStoreAdapter`2"/> instance that is thread-safe and uses the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <returns>
            A <see cref="T:Remotion.Collections.LazyLockingDataStoreAdapter`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access and additional, 
            double-checked locks (see <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>) to protect each single value. It is well-suited for data stores
            in which the factory delegates passed to <see cref="M:Remotion.Collections.IDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> take a long time to execute. When the factory
            delegates do not take a long time, consider using <see cref="M:Remotion.Collections.DataStoreFactory.CreateWithLocking``2"/> instead to reduce the number of locks used.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.DataStoreFactory.CreateWithLazyLocking``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LazyLockingDataStoreAdapter`2"/> instance that is thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LazyLockingDataStoreAdapter`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access and additional,
            double-checked locks (see <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>) to protect each single value. It is well-suited for data stores
            in which the factory delegates passed to <see cref="M:Remotion.Collections.IDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> take a long time to execute. When the factory
            delegates do not take a long time, consider using <see cref="M:Remotion.Collections.DataStoreFactory.CreateWithLocking``2(System.Collections.Generic.IEqualityComparer{``0})"/>
            instead to reduce the number of locks used.
            </remarks>
        </member>
        <member name="T:Remotion.Collections.ExpiringDataStore`4">
            <summary>
            The <see cref="T:Remotion.Collections.ExpiringDataStore`4"/> stores values that can be expire.
            </summary>
        </member>
        <member name="T:Remotion.Collections.IDataStore`2">
            <summary>
            Provides a common interface for data structures used for storing and retrieving key/value pairs.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <remarks>
            <para>
            This interface is basically a simplified version of the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface. In contrast to 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>, it does not require implementers to support <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>,
            etc, so it is much simpler to implement.
            </para>
            <para>
            Use this in place of <see cref="T:Remotion.Collections.ICache`2"/> if you need a reliable data store which guarantees to keep values once inserted until
            they are removed.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.INullObject">
            <summary>
            Represents a nullable object according to the "Null Object Pattern".
            </summary>
        </member>
        <member name="P:Remotion.INullObject.IsNull">
            <summary>
            Gets a value indicating whether the object is a "Null Object".
            </summary>
        </member>
        <member name="M:Remotion.Collections.IDataStore`2.ContainsKey(`0)">
            <summary>
            Determines whether the store contains an element with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            <see langword="true"/> if the store contains the specified key; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.IDataStore`2.Add(`0,`1)">
            <summary>
            Adds a new element to the store.
            </summary>
            <param name="key">The key of the new element. Must not be <see langword="null"/>.</param>
            <param name="value">The value of the new element. Can be <see langword="null"/> null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An item with an equal key already exists in the store.</exception>
        </member>
        <member name="M:Remotion.Collections.IDataStore`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the store, if any.
            </summary>
            <param name="key">The key of the element to be removed. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the item was found in the store; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.IDataStore`2.Clear">
            <summary>
            Removes all elements from the store.
            </summary>
        </member>
        <member name="M:Remotion.Collections.IDataStore`2.GetValueOrDefault(`0)">
            <summary>
            Gets the value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element exists.
            </summary>
            <param name="key">The key to look up. Must not be <see langword="null" />.</param>
            <returns>The value of the element, or the default value if no such element exists.</returns>
        </member>
        <member name="M:Remotion.Collections.IDataStore`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value of the element with the specified key.
            </summary>
            <param name="key">The key to look up. Must not be <see langword="null" />.</param>
            <param name="value">
            The value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element exists.
            Can be <see langword="null" />.
            </param>
            <returns><see langword="true" /> if an element with the specified key was found; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Remotion.Collections.IDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})">
            <summary>
            Gets the value of the element with the specified key, creating a new one if none exists.
            </summary>
            <param name="key">The key of the element to be retrieved. Must not be <see langword="null" />.</param>
            <param name="valueFactory">A delegate used for creating a new element if none exists. Must not be <see langword="null" />.</param>
            <returns>The value of the element that was found or created.</returns>
        </member>
        <member name="P:Remotion.Collections.IDataStore`2.Item(`0)">
            <summary>
            Gets or sets the value of the element with the specified key.
            </summary>
            <value>The value of the element.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The element whose value should be retrieved could not be found.</exception>
        </member>
        <member name="T:Remotion.Collections.ExpiringDataStoreFactory">
            <summary>
            The <see cref="T:Remotion.Collections.ExpiringDataStoreFactory"/> provides factory methods to create new expired data stores.
            </summary>
        </member>
        <member name="M:Remotion.Collections.ExpiringDataStoreFactory.Create``4(Remotion.Collections.IExpirationPolicy{``1,``2,``3},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.ExpiringDataStore`4"/> instance that is not thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="TExpirationInfo">The type of the expiration info used by the <paramref name="policy"/>.</typeparam>
            <typeparam name="TScanInfo">The type of the scan info used by the <paramref name="policy"/>.</typeparam>
            <param name="policy">The policy that is used to check for expired items.</param>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <returns>
            A <see cref="T:Remotion.Collections.ExpiringDataStore`4"/> instances for storing keys and values.
            </returns>
        </member>
        <member name="M:Remotion.Collections.ExpiringDataStoreFactory.CreateWithLocking``4(Remotion.Collections.IExpirationPolicy{``1,``2,``3},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LockingDataStoreDecorator`2"/> instance that is thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="TExpirationInfo">The type of the expiration info used by the <paramref name="policy"/>.</typeparam>
            <typeparam name="TScanInfo">The type of the scan info used by the <paramref name="policy"/>.</typeparam>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <param name="policy">The policy that is used to check for expired items.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LockingDataStoreDecorator`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access. It is well-suited
            for data stores in which the factory delegates passed to <see cref="M:Remotion.Collections.IDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> only take a short time to 
            complete. When the factory delegates take a long time to execute, consider using <see cref="M:Remotion.Collections.ExpiringDataStoreFactory.CreateWithLazyLocking``4(Remotion.Collections.IExpirationPolicy{Remotion.DoubleCheckedLockingContainer{Remotion.Collections.LazyLockingDataStoreAdapter{``0,``1}.Wrapper},``2,``3},System.Collections.Generic.IEqualityComparer{``0})"/> 
            instead to reduce contention.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.ExpiringDataStoreFactory.CreateWithLazyLocking``4(Remotion.Collections.IExpirationPolicy{Remotion.DoubleCheckedLockingContainer{Remotion.Collections.LazyLockingDataStoreAdapter{``0,``1}.Wrapper},``2,``3},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Remotion.Collections.LazyLockingDataStoreAdapter`2"/> instance that is thread-safe and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="TExpirationInfo">The type of the expiration info used by the <paramref name="policy"/>.</typeparam>
            <typeparam name="TScanInfo">The type of the scan info used by the <paramref name="policy"/>.</typeparam>
            <param name="comparer">The comparer to use for comparing keys.</param>
            <param name="policy">The policy that is used to check for expired items.</param>
            <returns>
            A <see cref="T:Remotion.Collections.LazyLockingDataStoreAdapter`2"/> instances for storing keys and values in a thread-safe way.
            </returns>
            <remarks>
            The created instance uses a single lock (see <see cref="T:System.Threading.Monitor"/>) to guard the data store against multi-threaded access and additional,
            double-checked locks (see <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>) to protect each single value. It is well-suited for data stores
            in which the factory delegates passed to <see cref="M:Remotion.Collections.IDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})"/> take a long time to execute. When the factory
            delegates do not take a long time, consider using <see cref="M:Remotion.Collections.ExpiringDataStoreFactory.CreateWithLocking``4(Remotion.Collections.IExpirationPolicy{``1,``2,``3},System.Collections.Generic.IEqualityComparer{``0})"/> instead to reduce the number of locks used.
            </remarks>
        </member>
        <member name="T:Remotion.Collections.ICache`2">
            <summary>
            Provides a comnmon interface for caches, which provide efficient storage and retrieval for values that are costly to calculate.
            </summary>
            <typeparam name="TKey">The key type via which values should be indexed.</typeparam>
            <typeparam name="TValue">The type of the values to be stored in the cache.</typeparam>
            <remarks>
            Caches are only meant for performance improvement, they are not reliable data containers. Do not rely on values being present in the cache;
            caches might choose to remove individual items (or all their items) at any time. If a reliable store is needed, use 
            <see cref="T:System.Collections.Generic.IDictionary`2"/> or <see cref="T:Remotion.Collections.IDataStore`2"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.ICache`2.GetOrCreateValue(`0,System.Func{`0,`1})">
            <summary>
            Gets the value of the element with the specified key, creating a new one if none exists.
            </summary>
            <param name="key">The key of the element to be retrieved. Must not be <see langword="null" />.</param>
            <param name="valueFactory">A delegate used for creating a new element if none exists. Must not be <see langword="null" />.</param>
            <returns>The value of the element that was found or created.</returns>
        </member>
        <member name="M:Remotion.Collections.ICache`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value of the element with the specified key.
            </summary>
            <param name="key">The key to look up. Must not be <see langword="null" />.</param>
            <param name="value">
            The value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element exists.</param>
            <returns><see langword="true" /> if an element with the specified key was found; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Remotion.Collections.ICache`2.Clear">
            <summary>
            Removes all elements from the store.
            </summary>
        </member>
        <member name="T:Remotion.Collections.IExpirationPolicy`3">
            <summary>
            <see cref="T:Remotion.Collections.IExpirationPolicy`3"/> defines the API for implementations that handle value expiration. This is
            used by <see cref="T:Remotion.Collections.ExpiringDataStore`4"/>. 
            </summary>
            <typeparam name="TValue">The type of the values that can expire.</typeparam>
            <typeparam name="TExpirationInfo">The type of expiration metadata required by the concrete implementation. Implementations use expiration
            metadata to decide whether a value is expired.</typeparam>
            <typeparam name="TScanInfo">The type of scan metadata required by the concrete implementation. Implementations use scan metadata to decide
            whether all values should be rescanned for expiration.</typeparam>
        </member>
        <member name="T:Remotion.Collections.ImmutableSingleton">
            <summary>
            Defines factory methods for <see cref="T:Remotion.Collections.ImmutableSingleton`1"/>.
            </summary>
        </member>
        <member name="T:Remotion.Collections.ImmutableSingleton`1">
            <summary>
            The <see cref="T:Remotion.Collections.ImmutableSingleton`1"/> is a single-item implementation of the <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> interface.
            </summary>
            <seealso cref="T:Remotion.Collections.ImmutableSingleton"/>
        </member>
        <member name="T:Remotion.Collections.LazyLockingCachingAdapter`2">
            <summary>
            Adapts an implementation of <see cref="T:Remotion.Collections.ICache`2"/> that stores <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/> holding
            lazily constructed values so that users can access those values without indirection, and in a thread-safe way. Use 
            <see cref="M:Remotion.Collections.CacheFactory.CreateWithLazyLocking``2"/> to create an instance of this type.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <threadsafety static="true" instance="true"/>
            <remarks>
            This class internally combines a <see cref="T:Remotion.Collections.LockingCacheDecorator`2"/> with <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>
            instances. This leads to the effect that the lock used for the synchronization of the data store is always held for a very short time only,
            even if the factory delegate for a specific value takes a long time to execute.
            </remarks>
        </member>
        <member name="T:Remotion.Collections.LazyLockingDataStoreAdapter`2">
            <summary>
            Adapts an implementation of <see cref="T:Remotion.Collections.IDataStore`2"/> that stores <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/> holding
            lazily constructed values so that users can access those values without indirection, and in a thread-safe way. Use 
            <see cref="M:Remotion.Collections.DataStoreFactory.CreateWithLazyLocking``2"/> to create an instance of this type.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <threadsafety static="true" instance="true"/>
            <remarks>
            This class internally combines a <see cref="T:Remotion.Collections.LockingDataStoreDecorator`2"/> with <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>
            instances. This leads to the effect that the lock used for the synchronization of the data store is always held for a very short time only,
            even if the factory delegate for a specific value takes a long time to execute.
            </remarks>
        </member>
        <member name="T:Remotion.Collections.ReadOnlyCollectionDecorator`1">
            <summary>
            Read-only wrapper around an <see cref="T:System.Collections.Generic.ICollection`1"/> which itself explicitely implements <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <remarks>
            Behaves analogue to <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>, i.e. not supported methods required by <see cref="T:System.Collections.Generic.ICollection`1"/> 
            throw <see cref="T:System.NotSupportedException"/>|s.
            <para/>
            </remarks>
        </member>
        <member name="T:Remotion.Collections.LockingInvalidationToken">
            <summary>The <see cref="T:Remotion.Collections.LockingInvalidationToken"/> can be used as a means to commicate that the cached information is no longer current.</summary>
            <remarks>
            Instantiate via <see cref="T:Remotion.Collections.InvalidationToken"/>.<see cref="M:Remotion.Collections.InvalidationToken.CreatWithLocking"/>.
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Remotion.Collections.TimeSpanBasedExpirationPolicy`1">
            <summary>
            The <see cref="T:Remotion.Collections.TimeSpanBasedExpirationPolicy`1"/> handles values which can be expire based on <see cref="T:System.TimeSpan"/> periods.
            </summary>
        </member>
        <member name="M:Remotion.Configuration.ServiceLocation.IServiceLocationConfiguration.CreateServiceLocatorProvider">
            <summary>
            Creates an <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> instance as indicated by <see cref="P:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.ServiceLocatorProvider"/>. If no 
            <see cref="P:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.ServiceLocatorProvider"/> is set, an instance of <see cref="T:Remotion.ServiceLocation.DefaultServiceLocatorProvider"/> is returned.
            </summary>
            <returns>An new <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> instance.</returns>
        </member>
        <member name="T:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration">
            <summary>
            Configures the service location performed by <see cref="T:Remotion.ServiceLocation.SafeServiceLocator"/>.
            </summary>
        </member>
        <member name="M:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.SetCurrent(Remotion.Configuration.ServiceLocation.IServiceLocationConfiguration)">
            <summary>
            Sets the <see cref="P:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.Current"/> <see cref="T:Remotion.Configuration.ServiceLocation.IServiceLocationConfiguration"/> instance.
            </summary>
            <param name="configuration">The new configuration to set as the <see cref="P:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.Current"/> configuration.</param>
        </member>
        <member name="M:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.#ctor">
            <summary>
            Initializes a new default instance of the <see cref="T:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration"/> class. To load the configuration from a config file,
            use <see cref="M:Remotion.Configuration.ConfigurationWrapper.GetSection(System.String)"/> instead.
            </summary>
        </member>
        <member name="M:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.CreateServiceLocatorProvider">
            <summary>
            Creates an <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> instance as indicated by <see cref="P:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.ServiceLocatorProvider"/>. If no 
            <see cref="P:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.ServiceLocatorProvider"/> is set, an instance of <see cref="T:Remotion.ServiceLocation.DefaultServiceLocatorProvider"/> is returned.
            </summary>
            <returns>An new <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> instance.</returns>
        </member>
        <member name="P:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.Current">
            <summary>
            Gets the current <see cref="T:Remotion.Configuration.ServiceLocation.IServiceLocationConfiguration"/> instance. This is used by 
            <see cref="P:Remotion.ServiceLocation.SafeServiceLocator.Current"/> to retrieve an <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> instance if no specific 
            <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> was configured via <see cref="M:Microsoft.Practices.ServiceLocation.ServiceLocator.SetLocatorProvider(Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)"/>.
            </summary>
            <value>The current <see cref="T:Remotion.Configuration.ServiceLocation.IServiceLocationConfiguration"/>.</value>
        </member>
        <member name="P:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration.ServiceLocatorProvider">
            <summary>
            Gets a <see cref="T:Remotion.Configuration.TypeElement`1"/> describing the custom <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> to be used. This provider defines
            the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> to be used by <see cref="P:Remotion.ServiceLocation.SafeServiceLocator.Current"/> if no custom <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> was
            configured using <see cref="M:Microsoft.Practices.ServiceLocation.ServiceLocator.SetLocatorProvider(Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)"/>.
            </summary>
            <value>A <see cref="T:Remotion.Configuration.TypeElement`1"/> describing the custom <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> type to be used.</value>
        </member>
        <member name="T:Remotion.Configuration.TypeResolution.TypeResolutionConfiguration">
            <summary>
            Configures the type discovery performed by <see cref="M:Remotion.Reflection.ContextAwareTypeUtility.GetTypeResolutionService"/>.
            </summary>
            <remarks>This configuration should be aligned with <see cref="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration"/>. See https://www.re-motion.org/jira/browse/RM-6413</remarks>
        </member>
        <member name="M:Remotion.Configuration.TypeResolution.TypeResolutionConfiguration.SetCurrent(Remotion.Configuration.TypeResolution.TypeResolutionConfiguration)">
            <summary>
            Sets the <see cref="P:Remotion.Configuration.TypeResolution.TypeResolutionConfiguration.Current"/> <see cref="T:Remotion.Configuration.TypeResolution.TypeResolutionConfiguration"/> instance.
            </summary>
            <param name="configuration">The new configuration to set as the <see cref="P:Remotion.Configuration.TypeResolution.TypeResolutionConfiguration.Current"/> configuration.</param>
        </member>
        <member name="P:Remotion.Configuration.TypeResolution.TypeResolutionConfiguration.Current">
            <summary>
            Gets the current <see cref="T:Remotion.Configuration.TypeResolution.TypeResolutionConfiguration"/> instance. This is used by 
            <see cref="M:Remotion.Reflection.ContextAwareTypeUtility.GetTypeDiscoveryService"/> to retrieve a <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> instance if
            <see cref="P:Remotion.Utilities.DesignerUtility.IsDesignMode"/> is not set to <see langword="true"/>.
            </summary>
            <value>The current <see cref="T:Remotion.Configuration.TypeResolution.TypeResolutionConfiguration"/>.</value>
        </member>
        <member name="T:Remotion.Context.ISafeContextStorageProvider">
            <summary>
            Common interface for classes implementing a storage mechanism for <see cref="T:Remotion.Context.SafeContext"/>.
            </summary>
        </member>
        <member name="M:Remotion.Context.ISafeContextStorageProvider.GetData(System.String)">
            <summary>
            Retrieves a data item from the context storage.
            </summary>
            <param name="key">The key identifying the data item.</param>
            <returns>The data item identified by the given key, or <see langword="null"/> if no such item exists in the storage.</returns>
        </member>
        <member name="M:Remotion.Context.ISafeContextStorageProvider.SetData(System.String,System.Object)">
            <summary>
            Sets a data item in the context storage, overwriting a previous value identified by the same key.
            </summary>
            <param name="key">The key identifying the data item.</param>
            <param name="value">The value to be stored in the context storage.</param>
        </member>
        <member name="M:Remotion.Context.ISafeContextStorageProvider.FreeData(System.String)">
            <summary>
            Frees the resources used by a specific data item in the context storage.
            </summary>
            <param name="key">The key identifying the data item to be freed.</param>
        </member>
        <member name="T:Remotion.Context.SafeContext">
            <summary>
            Superior alternative to the <see cref="T:System.ThreadStaticAttribute"/> and <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> for making member variables thread safe that 
            also works with ASP.NET threads.
            </summary>
            <remarks>
            <para>
            The data managed by this class is by default stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>, but the storage provider can be replaced by application 
            code if needed. Replacements for the storage provider must guarantee that all data stored by the <see cref="T:Remotion.Context.SafeContext"/> is thread-local.
            </para>
            <para>
            The Remotion.Web assembly by default replaces the storage provider with one that stores all data in the <see cref="T:System.Web.HttpContext"/>. 
            This ensures that <see cref="T:Remotion.Context.SafeContext"/> works as expected in ASP.NET environments when a session migrates between threads.
            </para>
            </remarks>
            <threadsafety>
            The data managed by this class is thread-local. The class is safe to be used from multiple threads at the same time, but each thread will have 
            its own copy of the data.
            </threadsafety>
        </member>
        <member name="T:Remotion.Context.SafeContextSingleton`1">
            <summary>
            Provides automatic "Singleton" behavior based on the <see cref="T:Remotion.Context.SafeContext"/> class.
            </summary>
            <typeparam name="T">The type for which a single instance should be held in the <see cref="T:Remotion.Context.SafeContext"/>.</typeparam>
            <remarks>
            This class stores a single instance of <typeparamref name="T"/> in the <see cref="T:Remotion.Context.SafeContext"/>. Use it to ensure that exactly one 
            instance of <typeparamref name="T"/> exists per thread, web context, or the respective current <see cref="T:Remotion.Context.SafeContext"/> policy.
            </remarks>
            <threadsafety>
            The data managed by this class is held in the <see cref="T:Remotion.Context.SafeContext"/> and therefore thread-local. The class is safe to be used from multiple
            threads at the same time, but each thread will have its own copy of the data.
            </threadsafety>
        </member>
        <member name="T:Remotion.IHandleAttribute">
            <summary>
            Implemented by custom attributes that denote that a type implements the Handle pattern; i.e., its instances represent a pointer to an object 
            rather than the object itself.
            </summary>
            <remarks>
            This interface is used by WXE/Security integration in order to allow security evaluation when object handles are passed to a WXE function.
            </remarks>
        </member>
        <member name="M:Remotion.IHandleAttribute.GetReferencedType(System.Type)">
            <summary>
            When passed the type to which this <see cref="T:Remotion.IHandleAttribute"/> is applied, this method returns the type of objects referenced by the handle.
            </summary>
        </member>
        <member name="M:Remotion.IHandleAttribute.GetReferencedInstance(System.Object)">
            <summary>
            When passed an instance of the type to which this <see cref="T:Remotion.IHandleAttribute"/> is applied, this method returns the object referenced by 
            the handle.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.ContextAwareTypeDiscoveryUtility">
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Remotion.Reflection.MethodInfoExtensions">
            <summary>
            Defines extension methods for working with <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.MethodInfoExtensions.GetOriginalDeclaringType(System.Reflection.MethodInfo)">
            <summary>
            Returns the <see cref="T:System.Type"/> where the method was initially declared.
            </summary>
            <param name="methodInfo">The method whose type should be returned. Must not be <see langword="null"/>.</param>
            <returns>The <see cref="T:System.Type"/> where the method was declared for the first time.</returns>
        </member>
        <member name="M:Remotion.Reflection.MethodInfoExtensions.FindDeclaringProperty(System.Reflection.MethodInfo)">
            <summary>
            Finds the property declaration corresponding to this <see cref="T:System.Reflection.MethodInfo"/> on the given <see cref="T:System.Type"/> and it's base types.
            </summary>
            <returns>
            Returns the <see cref="T:System.Reflection.PropertyInfo"/> of the declared property, or <see langword="null"/> if no corresponding property was found.
            </returns>
        </member>
        <member name="T:Remotion.Reflection.MethodResolver">
            <summary>
            Resolves a method from the given parameters.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.MethodResolver.ResolveMethod(System.Type,System.String,System.String)">
            <summary>
            Resolves the method with the given name and signature. Cannot resolve closed generic methods.
            </summary>
            <param name="declaringType">Declaring type of the method to be resolved.</param>
            <param name="name">The simple name of the method to be resolved.</param>
            <param name="signature">The signature string of the method to be resolved. This has the same format as what is produced by the 
            <see cref="M:System.Object.ToString"/> method implementation of <see cref="T:System.Reflection.MethodInfo"/> objects.</param>
            <returns>The resolved method.</returns>
            <exception cref="T:System.MissingMethodException">No matching method could be found.</exception>
            <remarks>
            This mimics the behavior used by Reflection to serialize MethodInfos. It's not performant at all, but it should work reliably.
            </remarks>
        </member>
        <member name="T:Remotion.Reflection.PropertyInfoExtensions">
            <summary>
            Defines extension methods for working with <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.PropertyInfoExtensions.GetBaseDefinition(System.Reflection.PropertyInfo)">
            <summary>
            <see cref="T:System.Reflection.PropertyInfo"/> object for the property on the direct or indirect base class in which the property represented by this instance was first declared.
            </summary>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> object for the first implementation of this method.</returns>
        </member>
        <member name="M:Remotion.Reflection.PropertyInfoExtensions.GetOriginalDeclaringType(System.Reflection.PropertyInfo)">
            <summary>
            Returns the <see cref="T:System.Type"/> where the property was initially decelared.
            </summary>
            <param name="propertyInfo">The property whose identifier should be returned. Must not be <see langword="null"/>.</param>
            <returns>The <see cref="T:System.Type"/> where the property was declared for the first time.</returns>
        </member>
        <member name="M:Remotion.Reflection.PropertyInfoExtensions.IsOriginalDeclaration(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the given <see cref="T:System.Reflection.PropertyInfo"/> is the original base declaration.
            </summary>
            <param name="propertyInfo">The property info to check.</param>
            <returns>
              <see langword="true"/> if the <paramref name="propertyInfo"/> is the first declaration of the property; <see langword="false"/> if it is an 
              overrride.
            </returns>
        </member>
        <member name="M:Remotion.Reflection.PropertyInfoExtensions.GuessIsExplicitInterfaceProperty(System.Reflection.PropertyInfo)">
            <summary>
            Guesses whether the given property is an explicit interface implementation by checking whether it has got private virtual final accessors.
            This can be used as a heuristic to find explicit interface properties without having to check InterfaceMaps for every interface on
            info.DeclaringType. With C# and VB.NET, the heuristic should always be right.
            </summary>
            <param name="info">The property to check.</param>
            <returns>True, if the property is very likely an explicit interface implementation (at least in C# and VB.NET code); otherwise, false.</returns>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AssemblyNameCache">
            <summary>
            Caches the results of <see cref="T:System.Reflection.AssemblyName"/> operations.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.AssemblyTypeCache">
            <summary>
            Caches the types returned by <see cref="M:System.Reflection.Assembly.GetTypes"/>.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.BaseTypeCache">
            <summary>
            Holds a cache of type hierachies.
            </summary>
        </member>
        <member name="T:Remotion.Design.IDesignModeHelper">
            <summary>
            The <see cref="T:Remotion.Design.IDesignModeHelper"/> interface defines methods to encapsulate the access to various design-mode properties of a project.
            It is intended to be used by components offering design-time support.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeResolution.DefaultTypeResolutionService">
            <summary>Runtime implementation of the <see cref="T:System.ComponentModel.Design.ITypeResolutionService"/> interface.</summary>
            <remarks>This service should be aligned with <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService"/>. See https://www.re-motion.org/jira/browse/RM-6413</remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Remotion.Reflection.TypeExtensions">
            <summary>
            Defines extension methods for working with <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeExtensions.CanAscribeTo(System.Type,System.Type)">
            <summary>
            Evaluates whether the <paramref name="type"/> can be ascribed to the <paramref name="ascribeeType"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check. Must not be <see langword="null"/>.</param>
            <param name="ascribeeType">The <see cref="T:System.Type"/> to check the <paramref name="type"/> against. Must not be <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="type"/> is the <paramref name="ascribeeType"/> or its instantiation, 
            its subclass or the implementation of an interface in case the <paramref name="ascribeeType"/> is an interface.
            </returns>
        </member>
        <member name="M:Remotion.Reflection.TypeExtensions.GetAscribedGenericArguments(System.Type,System.Type)">
            <summary>
            Returns the type arguments for the ascribed <paramref name="ascribeeType"/> as inherited or implemented by a given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to return the type parameter. Must not be <see langword="null"/>.</param>
            <param name="ascribeeType">The <see cref="T:System.Type"/> to check the <paramref name="type"/> against. Must not be <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Type"/> array containing the generic arguments of the <paramref name="ascribeeType"/> as it is inherited or implemented
            by <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the <paramref name="type"/> is not the <paramref name="ascribeeType"/> or its instantiation, its subclass or the implementation
            of an interface in case the <paramref name="ascribeeType"/> is an interface.
            </exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            Thrown if the <paramref name="type"/> is an interface and implements the interface <paramref name="ascribeeType"/> or its instantiations
            more than once.
            </exception>
        </member>
        <member name="T:Remotion.ServiceLocation.BootstrapServiceConfiguration">
            <summary>
            Allows users to register services before an actual container or <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> has been built.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Remotion.ServiceLocation.IBootstrapServiceConfiguration">
            <summary>
            Defines an API for registering services before the actual container or <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> has been built.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Remotion.ServiceLocation.IBootstrapServiceConfiguration.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)">
            <summary>
            Registers the given <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> with this <see cref="T:Remotion.ServiceLocation.IBootstrapServiceConfiguration"/>.
            </summary>
            <param name="entry">The <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> to be registered.</param>
        </member>
        <member name="M:Remotion.ServiceLocation.IBootstrapServiceConfiguration.Register(System.Type,System.Type,Remotion.ServiceLocation.LifetimeKind)">
            <summary>
            Registers an entry with the given <see cref="T:System.Type"/> instances and <see cref="T:Remotion.ServiceLocation.LifetimeKind"/>.
            </summary>
            <param name="serviceType">The service type. This is a type for which instances are requested from a service locator.</param>
            <param name="implementationType">The concrete implementation of the service type.</param>
            <param name="lifetime">The lifetime of the instances of <paramref name="implementationType"/>.</param>
        </member>
        <member name="M:Remotion.ServiceLocation.IBootstrapServiceConfiguration.Reset">
            <summary>
            Removes all registered <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> data.
            </summary>
        </member>
        <member name="P:Remotion.ServiceLocation.IBootstrapServiceConfiguration.Registrations">
            <summary>
            Returns the <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> instances registered so far.
            </summary>
        </member>
        <member name="T:Remotion.ServiceLocation.DefaultServiceLocator">
            <summary>
            Provides a default implementation of the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> interface based on the <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>.
            The <see cref="T:Remotion.ServiceLocation.SafeServiceLocator"/> uses (and registers) an instance of this class unless an application registers its own service locator via 
            <see cref="M:Microsoft.Practices.ServiceLocation.ServiceLocator.SetLocatorProvider(Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)"/>.
            </summary>
            <remarks>
            <para>
            This implementation of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> uses the <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> to resolve implementations of
            "service types" (usually interfaces or abstract classes). When the <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/> is asked to get an instance of a specific 
            service type for the first time, that type is checked for a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>, which is then inspected to determine 
            the actual concrete type to be instantiated, its lifetime, and similar properties. An instance is then returned that fulfills the properties 
            defined by the <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>. After the first resolution of a service type, the instance (or a factory, 
            depending on the <see cref="T:Remotion.ServiceLocation.LifetimeKind"/> associated with the type) is cached, so subsequent lookups for the same type are very fast.
            </para>
            <para>
            The <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/> also provides a set of <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/> methods 
            that allow to registration of custom 
            implementations or factories for service types even if those types do not have the <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> applied. 
            Applications can use this to override the configuration defined by the <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> and to register 
            implementations of service types that do not have the <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> applied. Custom implementations or factories
            must be registered before an instance of the respective service type is retrieved for the first time.
            </para>
            <para>
            In order to be instantiable by the <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/>, a concrete type indicated by the 
            <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> must have exactly one public constructor. The constructor may have parameters, in which case
            the <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/> will try to get an instance for each of the parameters using the same <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            methods. If a parameter cannot be resolved (because the parameter type has no <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> applied and no
            custom implementation or factory was manually registered), an exception is thrown. Dependency cycles are not detected and will lead to a 
            <see cref="T:System.StackOverflowException"/> or infinite loop. Use the <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/> method to manually 
            register a factory for types that do not apply to these constructor rules.
            </para>
            <para>
            In order to have a custom service locator use the same defaults as the <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/>, the 
            <see cref="T:Remotion.ServiceLocation.DefaultServiceConfigurationDiscoveryService"/> can be used to extract those defaults from a set of types.
            </para>
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Remotion.ServiceLocation.IServiceConfigurationRegistry">
            <summary>
            Defines an API for registering a <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/>.
            </summary>
        </member>
        <member name="M:Remotion.ServiceLocation.IServiceConfigurationRegistry.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)">
            <summary>
            Registers a concrete implementation.
            </summary>
            <param name="serviceConfigurationEntry">A <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> describing the concrete implementation to be registered.</param>
            <exception cref="T:System.InvalidOperationException">An instance of the service type described by the <paramref name="serviceConfigurationEntry"/>
            has already been retrieved. Registering factories or concrete implementations can only be done before any instances are retrieved.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)">
            <inheritdoc/>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceLocator.GetInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>. The type must either have a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>, or
            a concrete implementation or factory must have been registered using one of the <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/> methods.
            </summary>
            <param name="serviceType">The type of object requested.</param>
            <returns>The requested service instance.</returns>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">There was an error resolving the service instance: The 
            <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> could not be found on the <paramref name="serviceType"/>, or the concrete implementation could
            not be instantiated. Inspect the <see cref="P:System.Exception.InnerException"/> property for the reason of the exception.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceLocator.GetInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>. The type must either have a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>, or
            a concrete implementation or factory must have been registered using one of the <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/> methods.
            </summary>
            <param name="serviceType">The type of object requested.</param>
            <param name="key">The name the object was registered with. This parameter is ignored by this implementation of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.</param>
            <returns>The requested service instance.</returns>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">There was an error resolving the service instance: The 
            <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> could not be found on the <paramref name="serviceType"/>, or the concrete implementation could
            not be instantiated. Inspect the <see cref="P:System.Exception.InnerException"/> property for the reason of the exception.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceLocator.GetAllInstances(System.Type)">
            <summary>
            Get all instance of the given <paramref name="serviceType"/>, or an empty sequence if no instance could be found.
            </summary>
            <param name="serviceType">The type of object requested.</param>
            <returns>
            A sequence of instances of the requested <paramref name="serviceType"/>. The <paramref name="serviceType"/> must either have a 
            <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>, or a concrete implementation or factory must have been registered using one of the 
            <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/> methods. Otherwise, the sequence is empty.
            </returns>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">There was an error resolving the service instances: The concrete 
            implementation could not be instantiated. Inspect the <see cref="P:System.Exception.InnerException"/> property for the reason of the exception.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceLocator.GetInstance``1">
             <summary>
             Get an instance of the given <typeparamref name="TService"/> type. The type must either have a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>, 
             or a concrete implementation or factory must have been registered using one of the <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/> methods.
             </summary>
            <typeparam name="TService">The type of object requested.</typeparam>
             <returns>The requested service instance.</returns>
             <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">There was an error resolving the service instance: The 
             <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> could not be found on the <typeparamref name="TService"/>, type or the concrete implementation 
             could not be instantiated. Inspect the <see cref="P:System.Exception.InnerException"/> property for the reason of the exception.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceLocator.GetInstance``1(System.String)">
            <summary>
            Get an instance of the given <typeparamref name="TService"/> type. The type must either have a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>,
            or a concrete implementation or factory must have been registered using one of the <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/> methods.
            </summary>
            <typeparam name="TService">The type of object requested.</typeparam>
            <param name="key">The name the object was registered with. This parameter is ignored by this implementation of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.</param>
            <returns>The requested service instance.</returns>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">There was an error resolving the service instance: The
            <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> could not be found on the <typeparamref name="TService"/>, type or the concrete implementation
            could not be instantiated. Inspect the <see cref="P:System.Exception.InnerException"/> property for the reason of the exception.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceLocator.GetAllInstances``1">
            <summary>
            Get all instance of the given <typeparamref name="TService"/> type, or an empty sequence if no instance could be found.
            </summary>
            <typeparam name="TService">The type of object requested.</typeparam>
            <returns>
            A sequence of instances of the requested <typeparamref name="TService"/> type. The <typeparamref name="TService"/> type must either have a 
            <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>, or a concrete implementation or factory must have been registered using one of the 
            <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/> methods. Otherwise, the sequence is empty.
            </returns>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">There was an error resolving the service instances: The concrete 
            implementation could not be instantiated. Inspect the <see cref="P:System.Exception.InnerException"/> property for the reason of the exception.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceLocator.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>. The type must either have a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>, or
            a concrete implementation or factory must have been registered using one of the <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/> methods. Otherwise, 
            the method returns <see langword="null"/>.
            </summary>
            <param name="serviceType">The type of object requested.</param>
            <returns>The requested service instance, or <see langword="null"/> if no instance could be found.</returns>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">There was an error resolving the service instance: The concrete 
            implementation could not be instantiated. Inspect the <see cref="P:System.Exception.InnerException"/> property for the reason of the exception.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceConfigurationRegistryExtensions.RegisterSingle``1(Remotion.ServiceLocation.IServiceConfigurationRegistry,System.Func{``0})">
            <summary>
            Registers factories for the specified <typeparamref name="TService"/>. 
            The factories are subsequently invoked whenever instances for the <typeparamref name="TService"/> is requested.
            </summary>
            <typeparam name="TService">The service type to register the factories for.</typeparam>
            <param name="serviceConfigurationRegistry">The <see cref="T:Remotion.ServiceLocation.IServiceConfigurationRegistry"/> with which to register the <typeparamref name="TService"/>.</param>
            <param name="instanceFactory">The instance factory to use when resolving instances for the <typeparamref name="TService"/>. This factory
            must return a non-null instance implementing the <typeparamref name="TService"/>, otherwise an <see cref="T:Microsoft.Practices.ServiceLocation.ActivationException"/> is thrown
            when an instance of <typeparamref name="TService"/> is requested.</param>
            <exception cref="T:System.InvalidOperationException">Factories have already been registered or an instance of the <typeparamref name="TService"/> has 
            already been retrieved. Registering factories or concrete implementations can only be done before any instances are retrieved.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceConfigurationRegistryExtensions.RegisterMultiple``1(Remotion.ServiceLocation.IServiceConfigurationRegistry,System.Func{``0}[])">
            <summary>
            Registers factories for the specified <typeparamref name="TService"/>. 
            The factories are subsequently invoked whenever instances for the <typeparamref name="TService"/> is requested.
            </summary>
            <typeparam name="TService">The service type to register the factories for.</typeparam>
            <param name="serviceConfigurationRegistry">The <see cref="T:Remotion.ServiceLocation.IServiceConfigurationRegistry"/> with which to register the <typeparamref name="TService"/>.</param>
            <param name="instanceFactories">The instance factories to use when resolving instances for the <typeparamref name="TService"/>. These factories
            must return non-null instances implementing the <typeparamref name="TService"/>, otherwise an <see cref="T:Microsoft.Practices.ServiceLocation.ActivationException"/> is thrown
            when an instance of <typeparamref name="TService"/> is requested.</param>
            <exception cref="T:System.InvalidOperationException">Factories have already been registered or an instance of the <typeparamref name="TService"/> has 
            already been retrieved. Registering factories or concrete implementations can only be done before any instances are retrieved.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceConfigurationRegistryExtensions.RegisterMultiple``1(Remotion.ServiceLocation.IServiceConfigurationRegistry,System.Collections.Generic.IEnumerable{System.Func{``0}})">
            <summary>
            Registers factories for the specified <typeparamref name="TService"/>. 
            The factories are subsequently invoked whenever instances for the <typeparamref name="TService"/> is requested.
            </summary>
            <typeparam name="TService">The service type to register the factories for.</typeparam>
            <param name="serviceConfigurationRegistry">The <see cref="T:Remotion.ServiceLocation.IServiceConfigurationRegistry"/> with which to register the <typeparamref name="TService"/>.</param>
            <param name="instanceFactories">The instance factories to use when resolving instances for the <typeparamref name="TService"/>. These factories
            must return non-null instances implementing the <typeparamref name="TService"/>, otherwise an <see cref="T:Microsoft.Practices.ServiceLocation.ActivationException"/> is thrown
            when an instance of <typeparamref name="TService"/> is requested.</param>
            <exception cref="T:System.InvalidOperationException">Factories have already been registered or an instance of the <typeparamref name="TService"/> has 
            already been retrieved. Registering factories or concrete implementations can only be done before any instances are retrieved.</exception>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceConfigurationRegistryExtensions.Register(Remotion.ServiceLocation.IServiceConfigurationRegistry,System.Type,System.Type,Remotion.ServiceLocation.LifetimeKind,Remotion.ServiceLocation.RegistrationType)">
            <summary>
            Registers a concrete implementation for the specified <paramref name="serviceType"/>.
            </summary>
            <param name="serviceConfigurationRegistry">The <see cref="T:Remotion.ServiceLocation.IServiceConfigurationRegistry"/> with which to register the <paramref name="serviceType"/>.</param>
            <param name="serviceType">The service type to register a concrete implementation for.</param>
            <param name="concreteImplementationType">The type of the concrete implementation to be instantiated when an instance of the 
            <paramref name="serviceType"/> is retrieved.</param>
            <param name="lifetime">The lifetime of the instances.</param>
            <param name="registrationType">The registration type of the implementation.</param>
            <exception cref="T:System.InvalidOperationException">An instance of the <paramref name="serviceType"/> has already been retrieved. Registering factories
            or concrete implementations can only be done before any instances are retrieved.</exception>
        </member>
        <member name="T:Remotion.ServiceLocation.ImplementationForAttribute">
            <summary>
            Associated an (implementation) type with the service type (usually an interface or abstract class) 
            as well as its <see cref="T:Remotion.ServiceLocation.LifetimeKind"/> and <see cref="P:Remotion.ServiceLocation.ImplementationForAttribute.RegistrationType"/>.
            This attribute is used by the DefaultServiceProvider to determine how to instantiate a service type. 
            Mutiple <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> instances can be applied to a single implementation type. They are not inherited.
            </summary>
        </member>
        <member name="M:Remotion.ServiceLocation.ImplementationForAttribute.#ctor(System.Type)">
            <summary>
            Defines a concrete implementation for a service type.
            </summary>
            <param name="serviceType">The type representing the concrete implementation for the service type.</param>
        </member>
        <member name="P:Remotion.ServiceLocation.ImplementationForAttribute.ServiceType">
            <summary>
            Gets the type of the implemented service interface.
            </summary>
        </member>
        <member name="P:Remotion.ServiceLocation.ImplementationForAttribute.Lifetime">
            <summary>
            Gets or sets the lifetime of instances of the concrete implementation type. The lifetime is used by service locators to control when to reuse 
            instances of the concrete implementation type and when to create new ones. The default value is <see cref="F:Remotion.ServiceLocation.LifetimeKind.InstancePerDependency"/>.
            </summary>
            <value>The lifetime of instances of the concrete implementation type.</value>
        </member>
        <member name="P:Remotion.ServiceLocation.ImplementationForAttribute.Position">
            <summary>
            Gets the position of the concrete implementation in the list of all concrete implementations for the respective service type. The position
            does not denote the exact index; instead, it only influences the relative ordering of this implementation with respect to the other
            implementations. The lowest position indicates the first implementation. In case of a decorator, it's the decorator closest to the implementation.
            </summary>
            <value>The position of the concrete implementation in the list of all concrete implementations.</value>
        </member>
        <member name="P:Remotion.ServiceLocation.ImplementationForAttribute.RegistrationType">
            <summary>
            Defines wether an implementation is registered as a single value or as a sequence, a compound type or a decorator.
            When using the ServiceLocator, "Single" and "Compound" registrations must be resolved via GetInstance() and "Multiple" registrations must be resolved 
            via GetAllInstances(). Otherwise, an ActivationException is thrown.
            </summary>
        </member>
        <member name="T:Remotion.ServiceLocation.DefaultServiceLocatorProvider">
            <summary>
            Implements <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> by providing instances of <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/>.
            </summary>
        </member>
        <member name="T:Remotion.ServiceLocation.IServiceLocatorProvider">
            <summary>
            Defines an API for classes providing a <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> implementation. This is used by <see cref="T:Remotion.ServiceLocation.SafeServiceLocator"/> in order 
            to retrieve the default <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> if no custom one was set via <see cref="M:Microsoft.Practices.ServiceLocation.ServiceLocator.SetLocatorProvider(Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)"/>.
            </summary>
        </member>
        <member name="M:Remotion.ServiceLocation.IServiceLocatorProvider.GetServiceLocator(System.Collections.ObjectModel.ReadOnlyCollection{Remotion.ServiceLocation.ServiceConfigurationEntry})">
            <summary>
            Returns an <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> instance.
            </summary>
            <param name="bootstrapConfiguration">
            A list of registrations made to the <see cref="P:Remotion.ServiceLocation.SafeServiceLocator.BootstrapConfiguration"/>. The implementation should include 
            those registrations in the returned <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> if it wants the service locator to include all custom configuration prepared
            for the boostrapping service locator.
            </param>
            <returns>An instance of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.</returns>
        </member>
        <member name="T:Remotion.ServiceLocation.LifetimeKind">
            <summary>
            Defines the lifetime of instances of a type managed by a service locator.
            </summary>
        </member>
        <member name="F:Remotion.ServiceLocation.LifetimeKind.Singleton">
            <summary>
            One instance is created and then reused every time an instance of the type is requested. This is the most efficient 
            <see cref="T:Remotion.ServiceLocation.LifetimeKind"/>, and it should be used whenever possible. However, in cases where the service locator is used from multiple threads,
            the <see cref="F:Remotion.ServiceLocation.LifetimeKind.Singleton"/> lifetime kind requires the instantiated type to be safe for multi-threading. Use <see cref="F:Remotion.ServiceLocation.LifetimeKind.InstancePerDependency"/> when an
            implementation is not thread-safe.
            </summary>
        </member>
        <member name="F:Remotion.ServiceLocation.LifetimeKind.InstancePerDependency">
            <summary>
            A new instance is created every time an instance of the type is requested. This is the simplest <see cref="T:Remotion.ServiceLocation.LifetimeKind"/> and works
            well even in multi-threaded environments, but it might not be the most efficient one. Use <see cref="F:Remotion.ServiceLocation.LifetimeKind.Singleton"/> for more efficiency.
            </summary>
        </member>
        <member name="T:Remotion.ServiceLocation.RegistrationType">
            <summary>
            Defines wether an implementation is registered as a single value or as a sequence.
            When using the ServiceLocator, "Single" registrations must be resolved via GetInstance() and "Multiple" registrations must be resolved 
            via GetAllInstances(). Otherwise, an ActivationException is thrown.
            </summary>
        </member>
        <member name="T:Remotion.ServiceLocation.ServiceImplementationInfo">
            <summary>
            Encapsulates a service implementation type and <see cref="T:Remotion.ServiceLocation.LifetimeKind"/>.
            </summary>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceImplementationInfo.CreateSingle``1(System.Func{``0},Remotion.ServiceLocation.LifetimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.ServiceLocation.ServiceImplementationInfo"/> class 
            with <see cref="P:Remotion.ServiceLocation.ServiceImplementationInfo.RegistrationType"/> set to <see cref="F:Remotion.ServiceLocation.RegistrationType.Single"/>.
            </summary>
            <param name="factory">The factory delegate that creates an instance of the service implementation.</param>
            <param name="lifetime">The <see cref="T:Remotion.ServiceLocation.LifetimeKind"/> of the instances created by the <paramref name="factory"/>. Defaults to <see cref="F:Remotion.ServiceLocation.LifetimeKind.InstancePerDependency"/>.</param>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceImplementationInfo.CreateMultiple``1(System.Func{``0},Remotion.ServiceLocation.LifetimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.ServiceLocation.ServiceImplementationInfo"/> class
            with <see cref="P:Remotion.ServiceLocation.ServiceImplementationInfo.RegistrationType"/> set to <see cref="F:Remotion.ServiceLocation.RegistrationType.Multiple"/>.
            </summary>
            <param name="factory">The factory delegate that creates an instance of the service implementation.</param>
            <param name="lifetime">The <see cref="T:Remotion.ServiceLocation.LifetimeKind"/> of the instances created by the <paramref name="factory"/>. Defaults to <see cref="F:Remotion.ServiceLocation.LifetimeKind.InstancePerDependency"/>.</param>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceImplementationInfo.#ctor(System.Type,Remotion.ServiceLocation.LifetimeKind,Remotion.ServiceLocation.RegistrationType)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.ServiceLocation.ServiceImplementationInfo"/> class.
            </summary>
            <param name="implementationType">The concrete implementation of the service type.</param>
            <param name="lifetime">The <see cref="T:Remotion.ServiceLocation.LifetimeKind"/> of the instances of <paramref name="implementationType"/>. Defaults to <see cref="F:Remotion.ServiceLocation.LifetimeKind.InstancePerDependency"/>.</param>
            <param name="registrationType">The <see cref="P:Remotion.ServiceLocation.ServiceImplementationInfo.RegistrationType"/> of the <paramref name="implementationType"/>. Defaults to <see cref="T:RegistrationType.Single"/>.</param>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceImplementationInfo.ToString">
            <inheritdoc />
        </member>
        <member name="P:Remotion.ServiceLocation.ServiceImplementationInfo.ImplementationType">
            <summary>
            Gets the concrete implementation type of the service.
            </summary>
            <value>The concrete implementation.</value>
        </member>
        <member name="P:Remotion.ServiceLocation.ServiceImplementationInfo.Lifetime">
            <summary>
            Gets the lifetime of the instances of <see cref="P:Remotion.ServiceLocation.ServiceImplementationInfo.ImplementationType"/>.
            </summary>
            <value>The lifetime of the instances.</value>
        </member>
        <member name="P:Remotion.ServiceLocation.ServiceImplementationInfo.Factory">
            <summary>
            The factory delegate that creates an instance of the service implementation.
            </summary>
        </member>
        <member name="T:Remotion.Logging.ILog">
            <summary>
            The <see cref="T:Remotion.Logging.ILog"/> interface declares methods for logging messages.
            </summary>
            <remarks>
                The <see cref="T:Remotion.Logging.ILog"/> interface is intended for implementing adapters to various logging frameworks.
              <note>
                The range of valid event ids is only guarenteed within the range of unsigned 16-bit integers.
              </note>
              <note type="inheritinfo">
                Implementors must support event ids within the range of unsigned 16-bit integers. The behavior outside this range is can be either truncation 
                of the event id or an <see cref="T:System.ArgumentOutOfRangeException"/>. Implementors must ensure that the log message is logged before an 
                <see cref="T:System.ArgumentOutOfRangeException"/> is thrown.
             </note>
            </remarks>
        </member>
        <member name="M:Remotion.Logging.ILog.Log(Remotion.Logging.LogLevel,System.Nullable{System.Int32},System.Object,System.Exception)">
            <summary>
            Log a message object with the specified <paramref name="logLevel"/> and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> of the message to be logged.</param>
            <param name="eventID">The numeric identifier for the event.</param>
            <param name="message">The message object to log.</param>
            <param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
        </member>
        <member name="M:Remotion.Logging.ILog.LogFormat(Remotion.Logging.LogLevel,System.Nullable{System.Int32},System.Exception,System.String,System.Object[])">
            <summary>
            Log a formatted string with the specified <paramref name="logLevel"/> and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> of the message to be logged.</param>
            <param name="eventID">The numeric identifier for the event.</param>
            <param name="format">A String containing zero or more format items.</param>
            <param name="args">An Object array containing zero or more objects to format.</param>
            <param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
        </member>
        <member name="M:Remotion.Logging.ILog.IsEnabled(Remotion.Logging.LogLevel)">
            <summary>
            Checks if this logger is enabled for the given <see cref="T:Remotion.Logging.LogLevel"/>.
            </summary>
            <param name="logLevel">The log level to check for.</param>
            <returns>
              <see langword="true"/> if the specified log level is enabled; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Remotion.Logging.ILogManager">
            <summary>
            The <see cref="T:Remotion.Logging.ILogManager"/> interface declares the methods available for retrieving a logger that implements
            <see cref="T:Remotion.Logging.ILog"/> and initializing the respective logging framework.
            </summary>
        </member>
        <member name="M:Remotion.Logging.ILogManager.GetLogger(System.String)">
            <summary>
            Gets or creates a logger.
            </summary>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>A logger for the <paramref name="name"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.ILogManager.GetLogger(System.Type)">
            <summary>
            Gets or creates a logger.
            </summary>
            <param name="type">The full name of <paramref name="type"/> will be used as the name of the logger to retrieve.</param>
            <returns>A logger for the fully qualified name of the <paramref name="type"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.ILogManager.Initialize">
            <summary>
            Initializes the logging framework abstracted through the <see cref="T:Remotion.Logging.ILogManager"/> interface.
            </summary>
        </member>
        <member name="M:Remotion.Logging.ILogManager.InitializeConsole">
            <summary>
            Initializes the logging framework to log to the console.
            </summary>
        </member>
        <member name="M:Remotion.Logging.ILogManager.InitializeConsole(Remotion.Logging.LogLevel,Remotion.Logging.LogThreshold[])">
            <summary>
            Initializes the current logging framework to log to the console, configuring a given <see cref="T:Remotion.Logging.LogLevel"/> as the default threshold as well
            as specific thresholds for specific loggers.
            </summary>
            <param name="defaultThreshold">The threshold for logging. Only log messages of at least this <see cref="T:Remotion.Logging.LogLevel"/> are output to the console
            for all loggers not specifically configured via <paramref name="logThresholds"/>.</param>
            <param name="logThresholds">The thresholds for specific loggers.</param>
        </member>
        <member name="T:Remotion.Logging.LogExtensions">
            <summary>
            Provides extension methods used for logging.
            </summary>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.LogAndReturnValue``1(``0,Remotion.Logging.ILog,Remotion.Logging.LogLevel,System.Func{``0,System.String})">
            <summary>
            Logs the given value and returns it to the caller. This is typically used to log a value returned by a method directly in the return 
            statement.
            </summary>
            <typeparam name="T">The (inferred) type of the value to be logged.</typeparam>
            <param name="value">The value to be logged.</param>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> to log the value with.</param>
            <param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> to log the value at. If the <paramref name="log"/> does not support this level, the 
            <paramref name="messageCreator"/> is not called.</param>
            <param name="messageCreator">A function object building the message to be logged.</param>
            <returns>The <paramref name="value"/> passed in to the method.</returns>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Log(Remotion.Logging.ILog,Remotion.Logging.LogLevel,System.Int32,System.Object)">
            <summary>
            Log a message object with the specified <paramref name="logLevel"/> and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> of the message to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Log(Remotion.Logging.ILog,Remotion.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Log a message object with the specified <paramref name="logLevel"/>,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> of the message to be logged.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Log(Remotion.Logging.ILog,Remotion.Logging.LogLevel,System.Object)">
            <summary>
            Log a message object with the specified <paramref name="logLevel"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> of the message to be logged.</param><param name="message">The message object to log.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.LogFormat(Remotion.Logging.ILog,Remotion.Logging.LogLevel,System.Int32,System.String,System.Object[])">
            <overloads>Log a formatted string with the specified <paramref name="logLevel"/>.</overloads>
            <summary>
            Log a formatted string with the specified <paramref name="logLevel"/> and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> of the message to be logged.</param><param name="eventID">The numeric identifier for the event.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.LogFormat(Remotion.Logging.ILog,Remotion.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            Log a formatted string with the specified <paramref name="logLevel"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> of the message to be logged.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.LogFormat(Remotion.Logging.ILog,Remotion.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Log a formatted string with the specified <paramref name="logLevel"/>,  including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> of the message to be logged.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Debug(Remotion.Logging.ILog,System.Int32,System.Object,System.Exception)">
            <overloads>Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Debug(Remotion.Logging.ILog,System.Int32,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Debug(Remotion.Logging.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Debug(Remotion.Logging.ILog,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.DebugFormat(Remotion.Logging.ILog,System.Int32,System.Exception,System.String,System.Object[])">
            <overloads>Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level.</overloads>
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.DebugFormat(Remotion.Logging.ILog,System.Int32,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.DebugFormat(Remotion.Logging.ILog,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.DebugFormat(Remotion.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Info(Remotion.Logging.ILog,System.Int32,System.Object,System.Exception)">
            <overloads>Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Info(Remotion.Logging.ILog,System.Int32,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Info(Remotion.Logging.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Info(Remotion.Logging.ILog,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.InfoFormat(Remotion.Logging.ILog,System.Int32,System.Exception,System.String,System.Object[])">
            <overloads>Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level.</overloads>
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.InfoFormat(Remotion.Logging.ILog,System.Int32,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.InfoFormat(Remotion.Logging.ILog,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.InfoFormat(Remotion.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Info"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Warn(Remotion.Logging.ILog,System.Int32,System.Object,System.Exception)">
            <overloads>Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Warn(Remotion.Logging.ILog,System.Int32,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Warn(Remotion.Logging.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Warn(Remotion.Logging.ILog,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.WarnFormat(Remotion.Logging.ILog,System.Int32,System.Exception,System.String,System.Object[])">
            <overloads>Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level.</overloads>
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.WarnFormat(Remotion.Logging.ILog,System.Int32,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.WarnFormat(Remotion.Logging.ILog,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.WarnFormat(Remotion.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Error(Remotion.Logging.ILog,System.Int32,System.Object,System.Exception)">
            <overloads>Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Error(Remotion.Logging.ILog,System.Int32,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Error(Remotion.Logging.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Error(Remotion.Logging.ILog,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.ErrorFormat(Remotion.Logging.ILog,System.Int32,System.Exception,System.String,System.Object[])">
            <overloads>Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level.</overloads>
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.ErrorFormat(Remotion.Logging.ILog,System.Int32,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.ErrorFormat(Remotion.Logging.ILog,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.ErrorFormat(Remotion.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Error"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Fatal(Remotion.Logging.ILog,System.Int32,System.Object,System.Exception)">
            <overloads>Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Fatal(Remotion.Logging.ILog,System.Int32,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="message">The message object to log.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Fatal(Remotion.Logging.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.Fatal(Remotion.Logging.ILog,System.Object)">
            <summary>
            Log a message object with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="message">The message object to log.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.FatalFormat(Remotion.Logging.ILog,System.Int32,System.Exception,System.String,System.Object[])">
            <overloads>Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level.</overloads>
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level and <paramref name="eventID"/>,
            including the stack trace of <paramref name="exceptionObject"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.FatalFormat(Remotion.Logging.ILog,System.Int32,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level and <paramref name="eventID"/>.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="eventID">The numeric identifier for the event.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.FatalFormat(Remotion.Logging.ILog,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.FatalFormat(Remotion.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Log a formatted string with the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level,
            including the stack trace of <paramref name="exceptionObject"/>. 
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> instance where the message is to be logged.</param><param name="exceptionObject">The <see cref="T:System.Exception"/> to log, including its stack trace. Pass <see langword="null"/> to not log an exception.</param>
            <param name="format">A String containing zero or more format items.</param><param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.IsDebugEnabled(Remotion.Logging.ILog)">
            <summary>
            Checks if <paramref name="log"/> is enabled for the <see cref="F:Remotion.Logging.LogLevel.Debug"/> level.
            </summary>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.IsInfoEnabled(Remotion.Logging.ILog)">
            <summary>
            Checks if <paramref name="log"/> is enabled for the <see cref="F:Remotion.Logging.LogLevel.Info"/> level.
            </summary>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.IsWarnEnabled(Remotion.Logging.ILog)">
            <summary>
            Checks if <paramref name="log"/> is enabled for the <see cref="F:Remotion.Logging.LogLevel.Warn"/> level.
            </summary>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.IsErrorEnabled(Remotion.Logging.ILog)">
            <summary>
            Checks if <paramref name="log"/> is enabled for the <see cref="F:Remotion.Logging.LogLevel.Error"/> level.
            </summary>
        </member>
        <member name="M:Remotion.Logging.LogExtensions.IsFatalEnabled(Remotion.Logging.ILog)">
            <summary>
            Checks if <paramref name="log"/> is enabled for the <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level.
            </summary>
        </member>
        <member name="T:Remotion.Logging.LogLevel">
            <summary>
            Defines the log levels available when logging through the <see cref="T:Remotion.Logging.ILog"/> interface.
            </summary>
        </member>
        <member name="F:Remotion.Logging.LogLevel.Debug">
            <summary>
            The <see cref="F:Remotion.Logging.LogLevel.Debug"/> level designates fine-grained informational events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:Remotion.Logging.LogLevel.Info">
            <summary>
            The <see cref="F:Remotion.Logging.LogLevel.Info"/> level designates informational messages that highlight the progress of the application at coarse-grained level. 
            </summary>
        </member>
        <member name="F:Remotion.Logging.LogLevel.Warn">
            <summary>
            The <see cref="F:Remotion.Logging.LogLevel.Warn"/> level designates potentially harmful situations.
            </summary>
        </member>
        <member name="F:Remotion.Logging.LogLevel.Error">
            <summary>
            The <see cref="F:Remotion.Logging.LogLevel.Error"/> level designates error events that might still allow the application to continue running. 
            </summary>
        </member>
        <member name="F:Remotion.Logging.LogLevel.Fatal">
            <summary>
            The <see cref="F:Remotion.Logging.LogLevel.Fatal"/> level designates very severe error events that will presumably lead the application to abort.
            </summary>
        </member>
        <member name="T:Remotion.Logging.LogManager">
            <summary>
            Use this class to create a logger implementing <see cref="T:Remotion.Logging.ILog"/> from the current <see cref="T:Remotion.Logging.ILogManager"/>.
            </summary>
            <remarks>
            Currently only <b>log4net</b> is supported as logging infrastructure.
            </remarks>
        </member>
        <member name="M:Remotion.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets or creates a logger.
            </summary>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>A logger for the <paramref name="name"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets or creates a logger.
            </summary>
            <param name="type">The full name of <paramref name="type"/> will be used as the name of the logger to retrieve.</param>
            <returns>A logger for the fully qualified name of the <paramref name="type"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.LogManager.Initialize">
            <summary>
            Initializes the current logging framework.
            </summary>
        </member>
        <member name="M:Remotion.Logging.LogManager.InitializeConsole">
            <summary>
            Initializes the current logging framework to log to the console.
            </summary>
        </member>
        <member name="M:Remotion.Logging.LogManager.InitializeConsole(Remotion.Logging.LogLevel,Remotion.Logging.LogThreshold[])">
            <summary>
            Initializes the current logging framework to log to the console, configuring a given <see cref="T:Remotion.Logging.LogLevel"/> as the default threshold as well
            as specific thresholds for specific loggers.
            </summary>
            <param name="defaultThreshold">The threshold for logging. Only log messages of at least this <see cref="T:Remotion.Logging.LogLevel"/> are output to the console
            for all loggers not specifically configured via <paramref name="logThresholds"/>.</param>
            <param name="logThresholds">The thresholds for specific loggers.</param>
        </member>
        <member name="T:Remotion.Logging.LogThreshold">
            <summary>
            Defines a <see cref="T:Remotion.Logging.LogLevel"/> as the threshold for a logger.
            </summary>
        </member>
        <member name="T:Remotion.PermanentGuidAttribute">
            <summary>
            Supplies an identifier that should remain constant even accross refactorings. 
            Can be applied to reference types, value types, interfaces, enums, properties, methods, and fields.
            </summary>
        </member>
        <member name="M:Remotion.PermanentGuidAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Remotion.PermanentGuidAttribute"/> class.
            </summary>
            <param name="value"> The <see cref="T:System.String"/> representation of a <see cref="T:System.Guid"/>. </param>
        </member>
        <member name="P:Remotion.PermanentGuidAttribute.Value">
            <summary>
              Gets the <see cref="T:System.Guid"/> supplied during initialization.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.CachingAssemblyFinderDecorator">
            <summary>
            Decorates an <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IAssemblyFinder"/>, caching its results.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IAssemblyFinder">
            <summary>
            Provides an interface for classes that find assemblies.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IAssemblyFinder.FindAssemblies">
            <summary>
            Finds assemblies as defined by implementers of this interface.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.ContextAwareTypeUtility">
            <summary>
            Represents the central entry point into re-motion's type discovery mechanism. All components requiring type discovery should use this class and
            its <see cref="M:Remotion.Reflection.ContextAwareTypeUtility.GetTypeDiscoveryService"/> method.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Remotion.Reflection.ContextAwareTypeUtility.GetTypeDiscoveryService">
            <summary>
            Gets the current context-specific <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/>. If <see cref="P:Remotion.Utilities.DesignerUtility.IsDesignMode"/> is set to 
            <see langword="true"/>, the designer's <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> is returned. Otherwise, the <see cref="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration"/> 
            is used to create a new  <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> when the property is first retrieved. That instance is stored for later uses.
            </summary>
            <returns>The current context-specific <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/>.</returns>
        </member>
        <member name="M:Remotion.Reflection.ContextAwareTypeUtility.GetTypeResolutionService">
            <summary>
            Gets the current context-specific <see cref="T:System.ComponentModel.Design.ITypeResolutionService"/>. If <see cref="P:Remotion.Utilities.DesignerUtility.IsDesignMode"/> is set to 
            <see langword="true"/>, the designer's <see cref="T:System.ComponentModel.Design.ITypeResolutionService"/> is returned. Otherwise, the <see cref="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration"/> 
            is used to create a new  <see cref="T:System.ComponentModel.Design.ITypeResolutionService"/> when the property is first retrieved. That instance is stored for later uses.
            </summary>
            <returns>The current context-specific <see cref="T:System.ComponentModel.Design.ITypeResolutionService"/>.</returns>
        </member>
        <member name="T:Remotion.ServiceLocation.SafeServiceLocator">
            <summary>
            <see cref="T:Remotion.ServiceLocation.SafeServiceLocator"/> is intended as a wrapper for <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/>, specifically the 
            <see cref="P:Microsoft.Practices.ServiceLocation.ServiceLocator.Current"/> property. In contrast to <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/>, <see cref="T:Remotion.ServiceLocation.SafeServiceLocator"/> will never throw
            a <see cref="T:System.NullReferenceException"/> but instead register an default <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> instance if no custom service locator was
            registered.
            </summary>
            <remarks>
            <para>
            Accessing <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/> will always lead to a <see cref="T:System.NullReferenceException"/> if no service locator is 
            configured. Using <see cref="T:Remotion.ServiceLocation.SafeServiceLocator"/> instead will catch the exception and register a default <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> instance.
            A provider for the default instance can be defined in the application configuration file (handled by 
            <see cref="T:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration"/>). The provider needs to implement <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> and must have a default 
            constructor.
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
              &lt;configSections&gt;
                &lt;section name="remotion.serviceLocation" type="Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration,Remotion" /&gt;
              &lt;/configSections&gt;
            
              &lt;remotion.serviceLocation xmlns="http://www.re-motion.org/serviceLocation/configuration"&gt;
                &lt;serviceLocatorProvider type="MyAssembly::MyServiceLocatorProvider"/&gt;
              &lt;/remotion.serviceLocation&gt;
            &lt;/configuration&gt;
            </code>
            </para>
            <para>
            If no provider is configured, a <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/> instance is used as the default instance.
            </para>
            </remarks>
        </member>
        <member name="P:Remotion.ServiceLocation.SafeServiceLocator.Current">
            <summary>
            Gets the currently configured <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>. 
            If no service locator is configured or <see cref="P:Microsoft.Practices.ServiceLocation.ServiceLocator.Current"/> returns <see langword="null"/>, 
            a default <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> will be returned as defined by the <see cref="T:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration"/>.
            </summary>
            <remarks>
            When this property is accessed while the default <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> instance is built (triggered through an outer access to this
            property), it will return a bootstrapping service locator that behaves just like <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/>. This means that the
            code building the default <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> can indeed access the <see cref="P:Remotion.ServiceLocation.SafeServiceLocator.Current"/> property without triggering any
            exceptions. To configure the bootstrapping <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>, use the <see cref="P:Remotion.ServiceLocation.SafeServiceLocator.BootstrapConfiguration"/> property.
            </remarks>
        </member>
        <member name="P:Remotion.ServiceLocation.SafeServiceLocator.BootstrapConfiguration">
            <summary>
            Allows clients to register services that are available while the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> is built.
            These service registrations are also passed on to the <see cref="T:Remotion.ServiceLocation.IServiceLocatorProvider"/> so that they can be incorporated in the
            final <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.
            </summary>
            <remarks>
            <para>
            When the <see cref="P:Remotion.ServiceLocation.SafeServiceLocator.Current"/> property is accessed for the first time, and no provider has been set  via 
            <see cref="M:Microsoft.Practices.ServiceLocation.ServiceLocator.SetLocatorProvider(Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)"/>, a default <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> is built as defined by the 
            <see cref="T:Remotion.Configuration.ServiceLocation.ServiceLocationConfiguration"/>. Building the default provider, which may include construction of an IoC container, can be a
            complex operation. When the code building the default locator accesses the <see cref="P:Remotion.ServiceLocation.SafeServiceLocator.Current"/> property, it will get a reference to a
            bootstrapping <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>, which behaves just like the <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/> (i.e., it evaluates
            <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> declarations and such).
            The <see cref="P:Remotion.ServiceLocation.SafeServiceLocator.BootstrapConfiguration"/> allows clients to register additional services with the bootstrapping <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.
            </para>
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:Remotion.Utilities.AttributeBasedTypeConverterFactory">
            <summary>
            Creates the <see cref="T:System.ComponentModel.TypeConverter"/> specified by the <see cref="T:System.ComponentModel.TypeConverterAttribute"/> if the requested type has the attribute applied.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ITypeConverterFactory">
            <summary>
            Creates a <see cref="T:System.ComponentModel.TypeConverter"/> if the type is supported by the factory.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.CompoundTypeConverterFactory">
            <summary>
            Creates a <see cref="T:System.ComponentModel.TypeConverter"/> from the list of <see cref="T:Remotion.Utilities.ITypeConverterFactory"/> implementations passed during initialization.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.EnumTypeConverterFactory">
            <summary>
            Creates an <see cref="T:Remotion.Utilities.AdvancedEnumConverter"/> if the requested type is an enum.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ITypeConversionProvider">
            <summary> 
              Provides functionality to get the <see cref="T:System.ComponentModel.TypeConverter"/> for a <see cref="T:System.Type"/> and to convert a value
              from a source <see cref="T:System.Type"/> into a destination <see cref="T:System.Type"/>.
            </summary>
            <remarks>
              Conversion is possible under the following conditions:
              <list type="bullet">
                <item>
                  A type has a <see cref="T:System.ComponentModel.TypeConverter"/> applied through the <see cref="T:System.ComponentModel.TypeConverterAttribute"/> that
                  supports the conversion. 
                </item>
                <item>
                  For <see cref="T:System.Enum"/> types into the <see cref="T:System.String"/> value or the underlying numeric 
                  <see cref="T:System.Type"/>.
                </item>
                <item>
                  For types without a <see cref="T:System.ComponentModel.TypeConverter"/>, the <see cref="T:Remotion.Utilities.TypeConversionProvider"/> tries to use the 
                  <see cref="T:Remotion.Utilities.BidirectionalStringConverter"/>. See the documentation of the string converter for details on the
                  supported types.
                </item>
              </list>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.ITypeConversionProvider.GetTypeConverter(System.Type,System.Type)">
            <summary> 
              Gets the <see cref="T:System.ComponentModel.TypeConverter"/> that is able to convert an instance of the <paramref name="sourceType"/> 
              <see cref="T:System.Type"/> into an instance of the <paramref name="destinationType"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="sourceType"> 
              The source <see cref="T:System.Type"/> of the value. Must not be <see langword="null"/>. 
            </param>
            <param name="destinationType"> 
              The destination <see cref="T:System.Type"/> of the value. Must not be <see langword="null"/>. 
            </param>
            <returns> 
              A <see cref="T:Remotion.Utilities.TypeConverterResult"/> or or <see cref="F:Remotion.Utilities.TypeConverterResult.Empty"/>if no matching <see cref="T:System.ComponentModel.TypeConverter"/> can be found.
            </returns>
            <remarks> 
              You can identify whether you must use the <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)"/> or the 
              <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)"/> method by testing the returned <see cref="T:System.ComponentModel.TypeConverter"/>'s
              <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)"/> and <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)"/> methods.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.ITypeConversionProvider.GetTypeConverter(System.Type)">
            <summary> 
              Gets the <see cref="T:System.ComponentModel.TypeConverter"/> that is associated with the specified <paramref name="type"/>.
            </summary>
            <param name="type"> 
              The <see cref="T:System.Type"/> to get the <see cref="T:System.ComponentModel.TypeConverter"/> for. Must not be <see langword="null"/>.
            </param>
            <returns>
              A <see cref="T:System.ComponentModel.TypeConverter"/> or <see langword="null"/> of no <see cref="T:System.ComponentModel.TypeConverter"/> can be found.
            </returns>
        </member>
        <member name="M:Remotion.Utilities.ITypeConversionProvider.CanConvert(System.Type,System.Type)">
            <summary> 
              Test whether the <see cref="T:Remotion.Utilities.TypeConversionProvider"/> object can convert an object of <see cref="T:System.Type"/> 
              <paramref name="sourceType"/> into an object of <see cref="T:System.Type"/> <paramref name="destinationType"/>
              by using the <see cref="M:Remotion.Utilities.TypeConversionProvider.Convert(System.Type,System.Type,System.Object)"/> method.
            </summary>
            <param name="sourceType"> 
              The source <see cref="T:System.Type"/> of the value. Must not be <see langword="null"/>. 
            </param>
            <param name="destinationType"> 
              The destination <see cref="T:System.Type"/> of the value. Must not be <see langword="null"/>. 
            </param>
            <returns> <see langword="true"/> if a conversion is possible. </returns>
        </member>
        <member name="M:Remotion.Utilities.ITypeConversionProvider.Convert(System.Type,System.Type,System.Object)">
            <summary> Convertes the <paramref name="value"/> into the <paramref name="destinationType"/>. </summary>
            <param name="sourceType"> 
              The source <see cref="T:System.Type"/> of the <paramref name="value"/>. Must not be <see langword="null"/>. 
            </param>
            <param name="destinationType"> 
              The destination <see cref="T:System.Type"/> of the <paramref name="value"/>. Must not be <see langword="null"/>. 
            </param>
            <param name="value"> The value to be converted. Must not be <see langword="null"/>. </param>
            <returns> An <see cref="T:System.Object"/> that represents the converted <paramref name="value"/>. </returns>
        </member>
        <member name="M:Remotion.Utilities.ITypeConversionProvider.Convert(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Type,System.Type,System.Object)">
            <summary> Convertes the <paramref name="value"/> into the <paramref name="destinationType"/>. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="sourceType"> 
              The source <see cref="T:System.Type"/> of the <paramref name="value"/>. Must not be <see langword="null"/>. 
            </param>
            <param name="destinationType"> 
              The destination <see cref="T:System.Type"/> of the <paramref name="value"/>. Must not be <see langword="null"/>. 
            </param>
            <param name="value"> The <see cref="T:System.Object"/> to be converted.</param>
            <returns> An <see cref="T:System.Object"/> that represents the converted <paramref name="value"/>. </returns>
        </member>
        <member name="T:Remotion.SuppressAttributesAttribute">
            <summary>
            When applied to a class, causes certain custom attributes to be filtered out by 
            <see cref="M:Remotion.Utilities.AttributeUtility.GetCustomAttributes(System.Type,System.Type,System.Boolean)"/> and 
            <see cref="M:Remotion.Utilities.AttributeUtility.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)"/>.
            </summary>
            <remarks>
            All attributes of the given base type or derived from it are filtered unless they are declared on the same level as the 
            <see cref="T:Remotion.SuppressAttributesAttribute"/>. Consider the following example:
            <example>
            <code>
            [A ("Base")]
            [B ("Base")]
            [C ("Base")]
            class Base
            {
            }
            
            [A ("Derived")]
            [B ("Derived")]
            [C ("Derived")]
            [SuppressAttributes (typeof (A))]
            class Derived : Base
            {
            }
            
            [A ("DerivedDerived")]
            [B ("DerivedDerived")]
            [C ("DerivedDerived")]
            class DerivedDerived : Derived
            {
            }
            
            class A : Attribute { ... }
            class B : A { ... }
            class C : Attribute { ... }
            </code>
            <para>
            In this example, a call to GetCustomAttributes on typeof (DerivedDerived) would yield the following attributes:
            [C ("Base"), A ("Derived"), B ("Derived"), C ("Derived"), C ("DerivedDerived")].
            </para>
            <para>
            [A ("Base")] and [A ("DerivedDerived")] are suppressed due
            to the <see cref="T:Remotion.SuppressAttributesAttribute"/> on Derived's declaration. [B ("Base")] and [B ("DerivedDerived")] are also suppressed, because
            they inherit from A, which is suppressed. The C attributes are not suppressed because they are not related to A; [A ("Derived")] and 
            [B ("Derived")] are not suppressed because they are declared on the same level as the <see cref="T:Remotion.SuppressAttributesAttribute"/>.
            </para>
            Do not suppress instances of <see cref="T:Remotion.SuppressAttributesAttribute"/>.
            </example>
            </remarks>
        </member>
        <member name="T:Remotion.Utilities.AttributeRetrieval.EventCustomAttributeRetriever">
            <summary>
            Implements <see cref="T:Remotion.Utilities.AttributeRetrieval.InheritanceAwareCustomAttributeRetriever`1"/> for <see cref="T:System.Reflection.EventInfo"/> objects.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.AttributeRetrieval.InheritanceAwareCustomAttributeRetriever`1">
            <summary>
            Implements a generic custom attribute retrieval algorithm that knows how to deal with inheritance.
            </summary>
            <typeparam name="TCustomAttributeProvider">The type of <see cref="T:System.Reflection.ICustomAttributeProvider"/> whose attributes should be retrieved.</typeparam>
        </member>
        <member name="T:Remotion.Utilities.CompoundComparer`1">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IComparer`1"/> as a composite of several individual <see cref="T:System.Collections.Generic.IComparer`1"/> instances. If the first comparer
            compares equal, the second is used, and so on. This is similar to how
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/> and
            <see cref="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})"/> work.
            </summary>
        </member>
        <member name="T:Remotion.Collections.CompoundValueEqualityComparer`1">
            <summary>
            <para>Class supplying automatic consistent <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)"/>, <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,System.Object)"/> and <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)"/> 
            implementation for instances of its generic type parameter, using a <see cref="T:System.Func`2"/> which returns
            the instance members which shall participate in the equality/hash code calculation.
            </para>
            <para>
            Note: The implementation incurs the performance overhead of the creation of the <see cref="T:System.Object"/>-arrays every time
            <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)"/> and <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)"/> get called. Be aware of this when using in performance critical code.
            </para>
            </summary>
            <typeparam name="T">Type for which <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)"/>, <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,System.Object)"/> and <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)"/> are supplied.</typeparam>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.#ctor(System.Func{`0,System.Object[]})">
            <summary>
            Ctor which takes the <see cref="T:System.Func`2"/> which must return an <see cref="T:System.Object"/>-array
            of the members which shall participate in the equality/hash code calculation.
            </summary>
            <param name="relevantValueProvider"></param>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,System.Object)">
            <summary>
            Standard conforming <see cref="M:System.Object.Equals(System.Object)"/> implementation comparing <typeparamref name="T"/> with an <see cref="T:System.Object"/>,
            using <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)"/>
            </summary>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.Equals(`0,`0)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/> implementation comparing all <see cref="T:System.Object"/>|s in the array returned by the <see cref="T:System.Func`2"/>.
            </summary>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)">
            <summary>
            <see cref="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetHashCode(`0)"/> implementation using all the <see cref="T:System.Object"/>|s in the array returned by the <see cref="T:System.Func`2"/>.
            </summary>
            <remarks>
            Returned hash code uses the <see cref="M:Remotion.Utilities.EqualityUtility.GetRotatedHashCode(System.Object[])"/> method.
            </remarks>
        </member>
        <member name="M:Remotion.Collections.CompoundValueEqualityComparer`1.GetEqualityParticipatingObjects(`0)">
            <summary>
            Returns the <see cref="T:System.Object"/>-array of the objects participating in the equality/hash code calculation for the passed instance.
            </summary>
        </member>
        <member name="T:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1">
            <summary>
            Wrapper around an <see cref="T:System.Collections.Generic.IEnumerable`1"/> which supplies element-wise <see cref="M:System.Object.Equals(System.Object)"/> and
            <see cref="M:System.Object.GetHashCode"/> semantics. Use in conjunction with <see cref="T:Remotion.Collections.CompoundValueEqualityComparer`1"/>
            to get value based semantics for container class members.
            </summary>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1.Equals(System.Object)">
            <summary>
            Compares the elements of the <see cref="T:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1"/> for equality, if the passed <see cref="T:System.Object"/> 
            is an <see cref="T:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1"/> .
            </summary>
        </member>
        <member name="M:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper`1.GetHashCode">
            <summary>
            Returns a hash code based on the members of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:Remotion.Collections.ComponentwiseEqualsAndHashcodeWrapper">
            <summary>
            ComponentwiseEqualsAndHashcodeWrapper-factory: ComponentwiseEqualsAndHashcodeWrapper.New(<see cref="T:System.Collections.Generic.IEnumerable`1"/>).
            </summary>
        </member>
        <member name="T:Remotion.Collections.DictionaryExtensions">
            <summary>
            Provides useful extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="T:Remotion.Collections.ListAdapter`2">
            <summary>
            Implements a different version of <see cref="T:System.Collections.Generic.IList`1"/> for an object that already implements <see cref="T:System.Collections.Generic.IList`1"/>. Delegates are used
            to convert items from the first to the second implementation.
            </summary>
            <remarks>
            Use this class if your only have an implementation of <c>IList&lt;T&gt;</c>, but need <c>IList&lt;U&gt;</c> instead (if, of course, T and U
            can be converted to each other).
            </remarks>
        </member>
        <member name="T:Remotion.Collections.ListAdapter">
            <summary>
            Provides factory methods to create instances of <see cref="T:Remotion.Collections.ListAdapter`2"/>.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.TypeDiscovery.ByFileIncludeRootAssemblyElement">
            <summary>
            Configures a root assembly or a set of root assemblies to be included by a file name or pattern.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.TypeDiscovery.ByFileRootAssemblyElementBase">
            <summary>
            Base class for classes configuring a root assembly or a set of root assemblies by a file name or pattern.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.TypeDiscovery.ByNameRootAssemblyElement">
            <summary>
            Configures a root assembly by its <see cref="T:System.Reflection.AssemblyName"/>.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.TypeDiscovery.ByNameRootAssemblyElementCollection">
            <summary>
            Configures a set of <see cref="T:Remotion.Configuration.TypeDiscovery.ByNameRootAssemblyElement"/> objects.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.TypeDiscovery.ByFileRootAssemblyElementCollection">
            <summary>
            Configures a set of <see cref="T:Remotion.Configuration.TypeDiscovery.ByFileRootAssemblyElementBase"/> objects.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.TypeDiscovery.ByFileExcludeRootAssemblyElement">
            <summary>
            Configures a root assembly or a set of root assemblies to be excluded by a file name or pattern.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.TypeDiscovery.RootAssembliesElement">
            <summary>
            Configures the root assemblies to be used for type discovery.
            </summary>
        </member>
        <member name="M:Remotion.Configuration.TypeDiscovery.RootAssembliesElement.CreateRootAssemblyFinder(Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader)">
            <summary>
            Creates a <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.CompositeRootAssemblyFinder"/> representing the assembly specifications given by <see cref="P:Remotion.Configuration.TypeDiscovery.RootAssembliesElement.ByName"/> and
            <see cref="P:Remotion.Configuration.TypeDiscovery.RootAssembliesElement.ByFile"/>.
            </summary>
            <returns>A <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.CompositeRootAssemblyFinder"/> for the assembly specifications.</returns>
        </member>
        <member name="P:Remotion.Configuration.TypeDiscovery.RootAssembliesElement.ByName">
            <summary>
            Gets a <see cref="T:Remotion.Configuration.TypeDiscovery.ByNameRootAssemblyElementCollection"/> allowing to specify assemblies by <see cref="T:System.Reflection.AssemblyName"/>.
            </summary>
            <value>A <see cref="T:Remotion.Configuration.TypeDiscovery.ByNameRootAssemblyElementCollection"/> allowing to specify assemblies by <see cref="T:System.Reflection.AssemblyName"/>.</value>
        </member>
        <member name="P:Remotion.Configuration.TypeDiscovery.RootAssembliesElement.ByFile">
            <summary>
            Gets a <see cref="T:Remotion.Configuration.TypeDiscovery.ByFileRootAssemblyElementCollection"/> allowing to specify assemblies by file name patterns.
            </summary>
            <value>A <see cref="T:Remotion.Configuration.TypeDiscovery.ByFileRootAssemblyElementCollection"/> allowing to specify assemblies by file name patterns.</value>
        </member>
        <member name="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration">
            <summary>
            Configures ContextAwareTypeUtilityormed by <see cref="M:Remotion.Reflection.ContextAwareTypeUtility.GetTypeDiscoveryService"/>.
            </summary>
        </member>
        <member name="M:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.SetCurrent(Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration)">
            <summary>
            Sets the <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.Current"/> <see cref="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration"/> instance.
            </summary>
            <param name="configuration">The new configuration to set as the <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.Current"/> configuration.</param>
        </member>
        <member name="M:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.#ctor">
            <summary>
            Initializes a new default instance of the <see cref="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration"/> class. To load the configuration from a config file,
            use <see cref="M:Remotion.Configuration.ConfigurationWrapper.GetSection(System.String)"/> instead.
            </summary>
        </member>
        <member name="M:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.CreateTypeDiscoveryService">
            <summary>
            Creates an <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> instance as indicated by <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.Mode"/>.
            </summary>
            <returns>A new <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> that discovers types as indicated by <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.Mode"/>.</returns>
        </member>
        <member name="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.Current">
            <summary>
            Gets the current <see cref="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration"/> instance. This is used by 
            <see cref="M:Remotion.Reflection.ContextAwareTypeUtility.GetTypeDiscoveryService"/> to retrieve a <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> instance if
            <see cref="P:Remotion.Utilities.DesignerUtility.IsDesignMode"/> is not set to <see langword="true"/>.
            </summary>
            <value>The current <see cref="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration"/>.</value>
        </member>
        <member name="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.Mode">
            <summary>
            Gets or sets the <see cref="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode"/> to be used for type discovery.
            </summary>
            <value>The <see cref="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode"/> to be used for type discovery.</value>
        </member>
        <member name="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.CustomRootAssemblyFinder">
            <summary>
            Gets a <see cref="T:Remotion.Configuration.TypeElement`1"/> describing the custom <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/> to be used. This is only relevant
            if <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.Mode"/> is set to <see cref="F:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode.CustomRootAssemblyFinder"/>. In this mode, an 
            <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService"/> is created, and an instance of the specified <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.CustomRootAssemblyFinder"/> type is
            employed for finding the root assemblies used for type discovery. The given type must have a default constructor.
            </summary>
            <value>A <see cref="T:Remotion.Configuration.TypeElement`1"/> describing the custom <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/> type to be used.</value>
        </member>
        <member name="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.SpecificRootAssemblies">
            <summary>
            Gets a <see cref="T:Remotion.Configuration.TypeDiscovery.RootAssembliesElement"/> describing specific root assemblies to be used. This is only relevant
            if <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.Mode"/> is set to <see cref="F:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode.SpecificRootAssemblies"/>. In this mode, an 
            <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService"/> is created, and the given root assemblies are employed for type discovery.
            Note that even if an assembly is specified as a root assembly, the default filtering rules (<see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter"/>)
            still apply even for that assembly.
            </summary>
            <value>A <see cref="T:Remotion.Configuration.TypeDiscovery.RootAssembliesElement"/> describing specific root assemblies to be used.</value>
        </member>
        <member name="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.CustomTypeDiscoveryService">
            <summary>
            Gets a <see cref="T:Remotion.Configuration.TypeElement`1"/> describing the custom <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> to be used. This is only relevant
            if <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.Mode"/> is set to <see cref="F:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode.CustomTypeDiscoveryService"/>. In this mode, an 
            instance of the specified <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.CustomTypeDiscoveryService"/> type is
            employed for type discovery. The given type must have a default constructor.
            </summary>
            <value>A <see cref="T:Remotion.Configuration.TypeElement`1"/> describing the custom <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> type to be used.</value>
        </member>
        <member name="T:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode">
            <summary>
            Defines how type discovery should work.
            </summary>
        </member>
        <member name="F:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode.Automatic">
            <summary>
            Chooses automatic type discovery - the application's bin directory is searched for assemblies. The types are discovered from those assemblies
            and their referenced assemblies.
            </summary>
        </member>
        <member name="F:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode.CustomRootAssemblyFinder">
            <summary>
            Chooses a custom <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/> which searches for root assemblies. The types are discovered from those assemblies. 
            Whether types from referenced assemblies are also included is defined by the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/>. 
            See <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.CustomRootAssemblyFinder"/>.
            </summary>
        </member>
        <member name="F:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode.SpecificRootAssemblies">
            <summary>
            Chooses a number of specific root assemblies. The types are discovered from those assemblies. Whether types from referenced assemblies are 
            also included is defined by the user.
            See <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.SpecificRootAssemblies"/>.
            </summary>
        </member>
        <member name="F:Remotion.Configuration.TypeDiscovery.TypeDiscoveryMode.CustomTypeDiscoveryService">
            <summary>
            Chooses a custom <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> implementation. The types are discovered by that service.
            See <see cref="P:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.CustomTypeDiscoveryService"/>.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.CodeGeneration.MethodReferencingAttribute">
            <summary>
            Defines a base class for attributes that reference a method by declaring type, name, and signature. Cannot be used to reference a closed
            generic method.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyNameSpecification">
            <summary>
            Holds an <see cref="T:System.Reflection.AssemblyName"/> for the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.NamedRootAssemblyFinder"/> as well as a flag indicating whether to 
            include referenced assemblies.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.CompositeRootAssemblyFinder">
            <summary>
            Composes several <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/> instances into one, combining all results and eliminating duplicates in the process.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder">
            <summary>
            Defines an interface for classes finding the root assemblies for type discovery.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder.FindRootAssemblies">
            <summary>
            Finds root assemblies as defined by the concrete implementation. Root assemblies are used by <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder"/> as an entry
            point into assembly discovery.
            </summary>
            <returns>A sequence of <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.RootAssembly"/> instances holding distinct, non-<see langword="null"/> <see cref="T:System.Reflection.Assembly"/> objects
            as well as flags indicating whether to follow the references of the respective assembly or not.</returns>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FilePatternRootAssemblyFinder">
            <summary>
            Finds the root assemblies by looking up and loading files matching the given patterns in a specified directory.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FilePatternRootAssemblyFinder.FileDescription">
            <summary>
            Holds a file path string as well as a flag indicating whether referenced assemblies should be followed or not. Equality comparisons of
            instances only check the file name, not the flag - this simplifies the algorithm to exclude file names in 
            <see cref="M:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FilePatternRootAssemblyFinder.ConsolidateSpecifications"/>.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FilePatternSpecification">
            <summary>
            Defines a file pattern for the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FilePatternRootAssemblyFinder"/> as well as how to interpret that pattern.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FilePatternSpecificationKind">
            <summary>
            Defines how a file pattern specification should be interpreted.
            </summary>
        </member>
        <member name="F:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FilePatternSpecificationKind.IncludeNoFollow">
            <summary>
            The files described by the pattern should be included, but referenced assemblies should not be followed.
            </summary>
        </member>
        <member name="F:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FilePatternSpecificationKind.IncludeFollowReferences">
            <summary>
            The files described by the pattern should be included, and their referenced assemblies should be followed.
            </summary>
        </member>
        <member name="F:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FilePatternSpecificationKind.Exclude">
            <summary>
            The files described by the pattern should be excluded. This removes any files previously included, but it does not affect any files
            included by a subsequent specification.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FileSystemSearchService">
            <summary>
            Implements the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IFileSearchService"/> using the <see cref="T:System.IO.Directory"/> class.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IFileSearchService">
            <summary>
            Provides a common interface for classes allowing to search for files using a search pattern.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.FixedRootAssemblyFinder">
            <summary>
            Implements <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/> by returning a fixed set of root assemblies.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.NamedRootAssemblyFinder">
            <summary>
            Loads root assemblies by assembly names.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.RootAssembly">
            <summary>
            Identifies a root assembly found by an implementation of <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/>. This includes the assembly itself as well as a flag
            indicating whether to follow the assembly's references or not.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader">
            <summary>
            Defines an interface for classes that can load assemblies from a file path.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader.TryLoadAssembly(System.String)">
            <summary>
            Tries to load an assembly from the given <paramref name="filePath"/>, returning <see langword="null"/> if the file exists but is no assembly.
            </summary>
            <param name="filePath">The file path to load the assembly from.</param>
            <returns>The loaded assembly, or <see langword="null"/> if the assembly can't be loaded.</returns>
            <exception cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AssemblyLoaderException">Thrown when the file cannot be found or an unexpected exception occurs while loading it.</exception>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader.TryLoadAssembly(System.Reflection.AssemblyName,System.String)">
            <summary>
            Tries the load an assembly from the given <paramref name="assemblyName"/>, returning <see langword="null"/> if the file exists but is no 
            assembly.
            </summary>
            <param name="assemblyName">The assembly name to load the assembly from.</param>
            <param name="context">Context information to be included with the exception message when the assembly cannot be found or an unexpected 
            exception occurs while loading it.</param>
            <returns>The loaded assembly, or <see langword="null"/> if the assembly can't be loaded.</returns>
            <exception cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AssemblyLoaderException">Thrown when the assembly cannot be found or an unexpected exception occurs while loading it.</exception>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.SearchPathRootAssemblyFinder">
            <summary>
            Finds the root assemblies by looking up and loading all DLL and EXE files in the assembly search path.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyFinding.SearchPathRootAssemblyFinder.CreateForCurrentAppDomain(System.Boolean,Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.SearchPathRootAssemblyFinder"/> type to look for assemblies within the current
            <see cref="T:System.AppDomain"/>'s <see cref="P:System.AppDomain.BaseDirectory"/> as well as its <see cref="P:System.AppDomain.RelativeSearchPath"/>
            (and, optionally, dynamic directory).
            </summary>
            <param name="considerDynamicDirectory">Specifies whether to search the <see cref="P:System.AppDomain.DynamicDirectory"/> as well as the base
            directory.</param>
            <param name="assemblyLoader">
            The <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader"/> to use for loading the root assemblies. This object determines any filtering made on the assemblies
            to be loaded.
            </param>
            <returns>An instance of the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.SearchPathRootAssemblyFinder"/> type looking for assemblies within the current
            <see cref="T:System.AppDomain"/>'s <see cref="P:System.AppDomain.BaseDirectory"/> as well as its <see cref="P:System.AppDomain.RelativeSearchPath"/>.
            </returns>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.LoadAllAssemblyLoaderFilter">
            <summary>
            Provides an implementation of <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoaderFilter"/> that loads all assemblies.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoaderFilter">
            <summary>
            Provides an interface for filtering the assemblies loaded by the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/>.
            </summary>
            <remarks>The filtering interface provides a two-step model: first, the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder"/> checks whether the assembly name fits the 
            criteria of the filter implementation, then, it checks whether the assembly itself fits the criteria. If the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/> 
            locates an assembly on disk, it will only load it if the assembly's name passes the first step. After loading, the second step can still reject 
            the assembly based on more detailed investigation.</remarks>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoaderFilter.ShouldConsiderAssembly(System.Reflection.AssemblyName)">
            <summary>
            Determines whether the assembly of the given name should be considered for inclusion by the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/>.
            </summary>
            <param name="assemblyName">The name of the assembly to be checked.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder"/> should consider this assembly; otherwise <see langword="false"/>.</returns>
            <remarks>This is the first step of a two-step filtering protocol. Assemblies rejected by this method will not be explicitly loaded by the
            <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/>.</remarks>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoaderFilter.ShouldIncludeAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether the given assembly should be included in the list of assemblies returned by the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/>.
            </summary>
            <param name="assembly">The assembly to be checked.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/> should return this assembly; otherwise <see langword="false"/>.</returns>
            <remarks>This is the second step of a two-step filtering protocol. Only assemblies not rejected by <see cref="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoaderFilter.ShouldConsiderAssembly(System.Reflection.AssemblyName)"/> are
            passed on to this step.</remarks>
        </member>
        <member name="T:Remotion.ServiceLocation.DefaultServiceConfigurationDiscoveryService">
            <summary>
            Provides services for scanning a range of types for default service configuration settings, as they would be applied by 
            <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/>. Use this class in order to configure a specific service locator with <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/>'s
            defaults.
            </summary>
            <remarks>
            <para>
            <see cref="T:Remotion.ServiceLocation.DefaultServiceConfigurationDiscoveryService"/> uses the same logic as <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/> in order to find the
            default concrete implementation of service types configured via the <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>. See 
            <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/> for more information about this.
            </para>
            <para>
            Concrete implementations registered with a specific <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/> using its <see cref="M:Remotion.ServiceLocation.DefaultServiceLocator.Register(Remotion.ServiceLocation.ServiceConfigurationEntry)"/>
            methods are not returned by this class.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceConfigurationDiscoveryService.GetDefaultConfiguration">
            <summary>
            Gets the default service configuration for the types returned by the given <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/>.
            </summary>
            <returns>A <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> for each serviceType that has implementations with a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> applied. 
            Types without the attribute are ignored.</returns>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceConfigurationDiscoveryService.GetDefaultConfiguration(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the default service configuration for the given types.
            </summary>
            <param name="serviceTypes">The types to get the default service configuration for.</param>
            <returns>A <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> for each serviceType that has implementations with a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> applied. 
            Types without the attribute are ignored.</returns>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceConfigurationDiscoveryService.GetDefaultConfiguration(System.Type)">
            <summary>
            Gets the default service configuration for the given types.
            </summary>
            <param name="serviceType">The type to get the default service configuration for.</param>
            <returns>A <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> for each serviceType that has implementations with a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> applied. 
            Types without the attribute are ignored.</returns>
        </member>
        <member name="M:Remotion.ServiceLocation.DefaultServiceConfigurationDiscoveryService.GetDefaultConfiguration(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the default service configuration for the types in the given assemblies.
            </summary>
            <param name="assemblies">The assemblies for whose types to get the default service configuration.</param>
            <returns>A <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> for each type that has the <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/> applied. 
            Types without the attribute are ignored.</returns>
        </member>
        <member name="T:Remotion.ServiceLocation.ServiceConfigurationEntry">
            <summary>
            Holds the parameters used by <see cref="T:Remotion.ServiceLocation.DefaultServiceLocator"/> for instantiating instances of service types. Use 
            <see cref="T:Remotion.ServiceLocation.DefaultServiceConfigurationDiscoveryService"/> to retrieve the <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> data for a specific type.
            </summary>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceConfigurationEntry.CreateFromAttributes(System.Type,System.Collections.Generic.IEnumerable{System.Tuple{System.Type,Remotion.ServiceLocation.ImplementationForAttribute}})">
            <summary>
            Creates a <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> from a <see cref="T:Remotion.ServiceLocation.ImplementationForAttribute"/>.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="attributes">Tuples holding information about the concrete type implementing <paramref name="serviceType"/> as well as the attribute instance.</param>
            <returns>A <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> containing the data from the <paramref name="attributes"/>.</returns>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceConfigurationEntry.#ctor(System.Type,Remotion.ServiceLocation.ServiceImplementationInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> class.
            </summary>
            <param name="serviceType">The service type. This is a type for which instances are requested from a service locator.</param>
            <param name="implementationInfos">The <see cref="T:Remotion.ServiceLocation.ServiceImplementationInfo"/> for the <paramref name="serviceType"/>.</param>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceConfigurationEntry.#ctor(System.Type,System.Collections.Generic.IEnumerable{Remotion.ServiceLocation.ServiceImplementationInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.ServiceLocation.ServiceConfigurationEntry"/> class.
            </summary>
            <param name="serviceType">The service type. This is a type for which instances are requested from a service locator.</param>
            <param name="implementationInfos">The service implementation information.</param>
        </member>
        <member name="M:Remotion.ServiceLocation.ServiceConfigurationEntry.ToString">
            <inheritdoc />
        </member>
        <member name="P:Remotion.ServiceLocation.ServiceConfigurationEntry.ServiceType">
            <summary>
            Gets the service type. This is a type for which instances are requested from a service locator.
            </summary>
            <value>The service type.</value>
        </member>
        <member name="P:Remotion.ServiceLocation.ServiceConfigurationEntry.ImplementationInfos">
            <summary>
            Gets information about all service implementations.
            </summary>
            <value>A collection of <see cref="T:Remotion.ServiceLocation.ServiceImplementationInfo"/> instances.</value>
            <remarks>
            When this information is used to configure an implementation of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>, <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetAllInstances(System.Type)"/>
            must return the implementing instances in exactly the same order as defined by <see cref="P:Remotion.ServiceLocation.ServiceConfigurationEntry.ImplementationInfos"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Utilities.DefaultConverter">
            <summary>
            The <see cref="T:Remotion.Utilities.DefaultConverter"/> provides a default implementation of <see cref="T:System.ComponentModel.TypeConverter"/> that does not actually modify the converted 
            values and can only convert from and to a given <see cref="T:System.Type"/>. It is, therefore, de-facto a no-op implementation of 
            <see cref="T:System.ComponentModel.TypeConverter"/>. It also supports converting from the underlying type to a nullable value type.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.DelegateBasedEqualityComparer`1">
            <summary>
            <see cref="T:Remotion.Utilities.DelegateBasedEqualityComparer`1"/> implements <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare two objects and calculate hash codes 
            with the specified delegates.
            </summary>
            <typeparam name="T">The type of the objects to be compared.</typeparam>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AssemblyLoaderException">
            <summary>
            Thrown when the automatic assembly loading performed by an implementation of <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader"/> yields an error during a
            load operation.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.CodeGeneration.GeneratedMethodWrapperAttribute">
            <summary>
            Marks a generated method as a public wrapper for another method.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader">
            <summary>
            Loads assemblies and applies <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoaderFilter">filters</see> before returning them.
            Assemblies are loaded from a file path by first getting their corresponding <see cref="T:System.Reflection.AssemblyName"/> and then loading the assembly with that 
            name.
            This means that only assemblies from the assembly search path (application directory, dynamic directory, GAC) can be loaded, and that GAC 
            assemblies are preferred. The advantage of this load mode is that assemblies are loaded exactly the same way as if loaded directly by .NET:
            they are always loaded into the correct context and references are resolved correctly.
            </summary>
            <remarks>
            The assemblies loaded by this class can be filtered by implementations of <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoaderFilter"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Collections.LockingDataStoreDecorator`2">
            <summary>
            Provides a synchronization wrapper around an implementation of <see cref="T:Remotion.Collections.IDataStore`2"/>. Use 
            <see cref="M:Remotion.Collections.DataStoreFactory.CreateWithLocking``2"/> to create an instance of this type.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <remarks>
            Instances of this object delegate every method call to an inner <see cref="T:Remotion.Collections.IDataStore`2"/> implementation,
            locking on a private synchronization object while the method is executed. This provides a convenient way to make an 
            <see cref="T:Remotion.Collections.IDataStore`2"/> thread-safe, as long as the store is only accessed through this wrapper.
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Remotion.Collections.LockingDataStoreDecorator`2.#ctor(Remotion.Collections.IDataStore{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Collections.LockingDataStoreDecorator`2"/> class.
            </summary>
            <param name="innerStore">The inner store which is wrapped.</param>
        </member>
        <member name="M:Remotion.Collections.LockingDataStoreDecorator`2.ContainsKey(`0)">
            <summary>
            Determines whether the store contains an element with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            true if the store contains the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.LockingDataStoreDecorator`2.Add(`0,`1)">
            <summary>
            Adds a new element to the store.
            </summary>
            <param name="key">The key of the new element.</param>
            <param name="value">The value of the new element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An item with an equal key already exists in the store.</exception>
        </member>
        <member name="M:Remotion.Collections.LockingDataStoreDecorator`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the store, if any.
            </summary>
            <param name="key">The key of the element to be removed.</param>
            <returns>
            true if the item was found in the store; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.LockingDataStoreDecorator`2.Clear">
            <summary>
            Removes all elements from the store.
            </summary>
        </member>
        <member name="M:Remotion.Collections.LockingDataStoreDecorator`2.GetValueOrDefault(`0)">
            <summary>
            Gets the value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element exists.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            The value of the element, or the default value if no such element exists.
            </returns>
        </member>
        <member name="M:Remotion.Collections.LockingDataStoreDecorator`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value of the element with the specified key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="value">The value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element
            exists.</param>
            <returns>
            true if an element with the specified key was found; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Collections.LockingDataStoreDecorator`2.GetOrCreateValue(`0,System.Func{`0,`1})">
            <summary>
            Gets the value of the element with the specified key, creating a new one if none exists.
            </summary>
            <param name="key">The key of the element to be retrieved.</param>
            <param name="valueFactory">A delegate used for creating a new element if none exists.</param>
            <returns>
            The value of the element that was found or created.
            </returns>
        </member>
        <member name="P:Remotion.Collections.LockingDataStoreDecorator`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Remotion.Collections.NullDataStore`2">
            <summary>
            This class implements a data store that doesn't actually store anything. It's part of the null object pattern.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="T:Remotion.Collections.SimpleDataStore`2">
            <summary>
            Implements the <see cref="T:Remotion.Collections.IDataStore`2"/> interface as a simple, not thread-safe in-memory data store based on a 
            <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.ContainsKey(`0)">
            <summary>
            Determines whether the store contains an element with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            true if the store contains the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.Add(`0,`1)">
            <summary>
            Adds a new element to the store.
            </summary>
            <param name="key">The key of the new element.</param>
            <param name="value">The value of the new element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An item with an equal key already exists in the store.</exception>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the store, if any.
            </summary>
            <param name="key">The key of the element to be removed.</param>
            <returns>
            true if the item was found in the store; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.Clear">
            <summary>
            Removes all elements from the store.
            </summary>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.GetValueOrDefault(`0)">
            <summary>
            Gets the value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element exists.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>
            The value of the element, or the default value if no such element exists.
            </returns>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value of the element with the specified key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="value">The value of the element with the specified key, or <typeparamref name="TValue"/>'s default value if no such element
            exists.</param>
            <returns>
            true if an element with the specified key was found; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.GetOrCreateValue(`0,System.Func{`0,`1})">
            <summary>
            Gets the value of the element with the specified key, creating a new one if none exists.
            </summary>
            <param name="key">The key of the element to be retrieved.</param>
            <param name="valueFactory">A delegate used for creating a new element if none exists.</param>
            <returns>
            The value of the element that was found or created.
            </returns>
        </member>
        <member name="M:Remotion.Collections.SimpleDataStore`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the contents of this <see cref="T:Remotion.Collections.SimpleDataStore`2"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the contents of this <see cref="T:Remotion.Collections.SimpleDataStore`2"/>.</returns>
        </member>
        <member name="P:Remotion.Collections.SimpleDataStore`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Remotion.Context.CallContextStorageProvider">
            <summary>
            Implements <see cref="T:Remotion.Context.ISafeContextStorageProvider"/> by storing data in the thread-local <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>.
            </summary>
        </member>
        <member name="T:Remotion.Collections.AutoInitDictionary`2">
            <summary>
              A dictionary that automatically creates new value objects when queried for a specific key.
            </summary>
            <remarks>
            	This collection should usually not be modified using <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/>, setting values through 
              the indexer or removing items. Getting values through the indexer will assign a new object to the specified key if none exists.
            </remarks>
        </member>
        <member name="T:Remotion.Collections.MultiDictionary`2">
            <summary>
            A dictionary that contains a <see cref="T:System.Collections.Generic.List`1"/> of values for every key.
            </summary>
        </member>
        <member name="M:Remotion.Collections.MultiDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value to the key's value list.
            </summary>
        </member>
        <member name="T:Remotion.Collections.LockingCacheDecorator`2">
            <summary>
            Provides a synchronization wrapper around an implementation of <see cref="T:Remotion.Collections.ICache`2"/>. Use 
            <see cref="M:Remotion.Collections.CacheFactory.CreateWithLocking``2"/> to create an instance of this type.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <remarks>
            Instances of this object delegate every method call to an inner <see cref="T:Remotion.Collections.ICache`2"/> implementation,
            locking on a private synchronization object while the method is executed. This provides a convenient way to make an 
            <see cref="T:Remotion.Collections.ICache`2"/> thread-safe, as long as the cache is only accessed through this wrapper.
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Remotion.Configuration.ConfigurationElementCollection`1.CreateNewElement">
            <summary>When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.</summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Remotion.Configuration.ConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>Gets the element key for a specified configuration element when overridden in a derived class.</summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="T:Remotion.Configuration.ConfigurationWrapper">
            <summary>Use the <see cref="T:Remotion.Configuration.ConfigurationWrapper"/> to encapsulate the access to the configiration data.</summary>
            <remarks>
            The .NET runtime does not provide an assignable well-known instance for the configuration. The <see cref="T:Remotion.Configuration.ConfigurationWrapper"/> is therefore
            the only option for injecting custom configuration data during design-time or for unit tests.
            </remarks>
        </member>
        <member name="T:Remotion.Configuration.ConfigurationWrapperFromConfigurationObject">
            <summary>
            Concrete implementation of <see cref="T:Remotion.Configuration.ConfigurationWrapper"/> that uses an instance of the <see cref="T:System.Configuration.Configuration"/>
            type. Create the instance by invoking <see cref="M:Remotion.Configuration.ConfigurationWrapper.CreateFromConfigurationObject(System.Configuration.Configuration)"/>.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.ConfigurationWrapperFromConfigurationManager">
            <summary>
            Concrete implementation of <see cref="T:Remotion.Configuration.ConfigurationWrapper"/> that uses the <see cref="T:System.Configuration.ConfigurationManager"/>. Create the instance by
            invoking <see cref="M:Remotion.Configuration.ConfigurationWrapper.CreateFromConfigurationManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Configuration.ExtendedConfigurationSection">
            <summary>Base class for all configuration sections using the <see cref="T:Remotion.Configuration.ProviderHelperBase"/> to manage their provider sections.</summary>
        </member>
        <member name="T:Remotion.Configuration.ExtendedProviderBase">
            <summary>Base class for all providers.</summary>
            <remarks>
            <see cref="T:Remotion.Configuration.ExtendedProviderBase"/> changes the protocoll for initializing a configuration provider from using a default constructor
            followed by a call to <see cref="M:Remotion.Configuration.ExtendedProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> to initialize the provider during construction.
            </remarks>
        </member>
        <member name="M:Remotion.Configuration.ExtendedProviderBase.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>Initializes a new instance of the <see cref="T:Remotion.Configuration.ExtendedProviderBase"/>.</summary>
            <param name="name">The friendly name of the provider. Must not be <see langword="null"/> or empty.</param>
            <param name="config">
            A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.
            Must not be <see langword="null"/>.
            </param>
        </member>
        <member name="T:Remotion.Configuration.ProviderCollection`1">
            <summary>Represents a collection of provider objects that inherit from <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Remotion.Configuration.ProviderCollection`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Remotion.Configuration.ProviderCollection`1"/> class.</summary>
        </member>
        <member name="M:Remotion.Configuration.ProviderCollection`1.Add(`0)">
            <summary>Adds a provider to the collection.</summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is <see langword="null"/>.<para>- or -</para>
            The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is less than 1.<para>- or -</para>
            The <paramref name="provider"/> is not derived from <see cref="T:System.Configuration.Provider.ProviderBase"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Remotion.Configuration.ProviderCollection`1.Add(System.Configuration.Provider.ProviderBase)">
            <summary>Adds a provider to the collection.</summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is <see langword="null"/>.<para>- or -</para>
            The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is less than 1.<para>- or -</para>
            The <paramref name="provider"/> is not assignable to <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="P:Remotion.Configuration.ProviderCollection`1.Item(System.String)">
            <summary>Gets the provider with the specified name.</summary>
            <param name="name">The key by which the provider is identified.</param>
            <returns>The provider with the specified name.</returns>
        </member>
        <member name="T:Remotion.Configuration.ProviderHelperBase">
            <summary>Abstract base class for <see cref="T:Remotion.Configuration.ProviderHelperBase`1"/>.</summary>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase.InitializeProperties(System.Configuration.ConfigurationPropertyCollection)">
            <summary>Initializes properties and adds them to the given <see cref="T:System.Configuration.ConfigurationPropertyCollection"/>.</summary>
        </member>
        <member name="T:Remotion.Configuration.ProviderHelperBase`1">
            <summary>Base for helper classes that load specific providers from the <see cref="T:System.Configuration.ConfigurationSection"/> section.</summary>
            <remarks>
              <see cref="T:Remotion.Configuration.ProviderHelperBase`1"/> is designed to work with providers deriving from <see cref="T:Remotion.Configuration.ExtendedProviderBase"/> and
              having a constructor with the following signature: <c>public ctor (<see cref="T:System.String"/>, <see cref="T:System.Collections.Specialized.NameValueCollection"/>)</c>.
            </remarks>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase`1.#ctor(Remotion.Configuration.ExtendedConfigurationSection)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Configuration.ProviderHelperBase`1"/> class. 
            </summary>
            <param name="configurationSection">
            The <see cref="T:System.Configuration.ConfigurationSection"/> holding the <see cref="P:Remotion.Configuration.ProviderHelperBase`1.ProviderSettings"/> 
            loaded from the configuration section in the xml file
            </param>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase`1.InitializeProperties(System.Configuration.ConfigurationPropertyCollection)">
            <summary>Initializes properties and adds them to the given <see cref="T:System.Configuration.ConfigurationPropertyCollection"/>.</summary>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase`1.InstantiateProviders(System.Configuration.ProviderSettingsCollection,System.Configuration.Provider.ProviderCollection,System.Type,System.Type[])">
            <summary>Initializes a collection of providers of the given type using the supplied settings.</summary>
            <param name="providerSettingsCollection">A collection of settings to be passed to the provider upon initialization.</param>
            <param name="providerCollection">The collection used to contain the initialized providers after the method returns.</param>
            <param name="providerType">The <see cref="T:System.Type"/> of the providers to be initialized.</param>
            <param name="providerInterfaces">The list of interfaces each provider must implement.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="providerSettingsCollection"/> is null.<para>- or -</para>
            <paramref name="providerCollection"/> is null.<para>- or -</para>
            <paramref name="providerType"/> is null.
            </exception>
        </member>
        <member name="M:Remotion.Configuration.ProviderHelperBase`1.InstantiateProvider(System.Configuration.ProviderSettings,System.Type,System.Type[])">
            <summary>Initializes and returns a single provider of the given type using the supplied settings.</summary>
            <param name="providerSettings">The settings to be passed to the provider upon initialization.</param>
            <param name="providerType">The <see cref="T:System.Type"/> of the providers to be initialized.</param>
            <param name="providerInterfaces">The list of interfaces each provider must implement.</param>
            <returns>A new provider of the given type using the supplied settings.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="providerSettings"/> is null.<para>- or -</para>
            <paramref name="providerType"/> is null.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            The provider threw an exception while it was being initialized.<para>- or -</para>
            An error occurred while attempting to resolve a <see cref="T:System.Type"/> instance for the provider specified in <paramref name="providerSettings"/>.
            </exception>    
        </member>
        <member name="P:Remotion.Configuration.ProviderHelperBase`1.Provider">
            <summary>Get and set the provider.</summary>
        </member>
        <member name="T:Remotion.Design.DesignModeHelperBase">
            <summary>
            Base implementation of the <see cref="T:Remotion.Design.IDesignModeHelper"/> interface.
            </summary>
        </member>
        <member name="T:Remotion.Design.EnvDteDesignModeHelper">
            <summary>
            Implementation of the <see cref="T:Remotion.Design.IDesignModeHelper"/> interface for the <b>EnvDTE</b> (i.e. Visual Studio) designer.
            </summary>
            <remarks>
            <see cref="M:Remotion.Design.EnvDteDesignModeHelper.GetConfiguration"/> is hard coded to look up a configuration file named <c>app.config</c>.
            </remarks>
        </member>
        <member name="T:Remotion.DoubleCheckedLockingContainer`1">
            <summary>Provides a standard implementation of the double checked locking pattern.</summary>
            <typeparam name="T">The type encapsulated by the <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>.</typeparam>
            <remarks>Initialize the container during the construction of the parent object and assign the value using the <see cref="P:Remotion.DoubleCheckedLockingContainer`1.Value"/> property.</remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Remotion.DoubleCheckedLockingContainer`1.#ctor(System.Func{`0})">
            <summary>Initializes a new instance of the <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/> type.</summary>
            <param name="defaultFactory">The delegate used to create the default value in case the value is <see langword="null"/>.</param>
        </member>
        <member name="P:Remotion.DoubleCheckedLockingContainer`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has already gotten a value.
            </summary>
            <value>true if this instance has a value; otherwise, false.</value>
        </member>
        <member name="P:Remotion.DoubleCheckedLockingContainer`1.Value">
            <summary>Gets or sets the object encapsulated by the <see cref="T:Remotion.DoubleCheckedLockingContainer`1"/>.</summary>
            <value>
            The object assigned via the set accessor<br/>or,<br/>
            if the value is <see langword="null"/>, the object created by the <b>defaultFactory</b> assigned during the initialization of the container.
            </value>
        </member>
        <member name="T:Remotion.Logging.Log4NetLog">
            <summary>
            Implementation of interface <see cref="T:Remotion.Logging.ILog"/> for <b>log4net</b>.
            </summary>
            <remarks>
            Use <see cref="T:Remotion.Logging.LogManager"/> to instantiate <see cref="T:Remotion.Logging.Log4NetLog"/> via <see cref="M:Remotion.Logging.LogManager.GetLogger(System.String)"/>.
            <note type="warning">
            <see cref="T:Remotion.Logging.Log4NetLog"/> does not allow event ids outside the range of unsigned 16-bit integers (0 - 65535) and will throw an
            <see cref="T:System.ArgumentOutOfRangeException"/> if an event id outside this range is encountered. The original message will be logged using a 
            truncated event id before the exception is thrown.
            </note>
            </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Convert(Remotion.Logging.LogLevel)">
            <summary>
            Converts <see cref="T:Remotion.Logging.LogLevel"/> to <see cref="T:log4net.Core.Level"/>.
            </summary>
            <param name="logLevel">The <see cref="T:Remotion.Logging.LogLevel"/> to be converted.</param>
            <returns>Corresponding <see cref="T:log4net.Core.Level"/> needed for logging to the <b>log4net </b> <see cref="T:log4net.ILog"/> interface.</returns>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.#ctor(log4net.Core.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Logging.Log4NetLog"/> class 
            using the specified <see cref="T:log4net.Core.ILogger"/>.
            </summary>
            <param name="logger">The <see cref="T:log4net.Core.ILogger"/> the log messages are written to.</param>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.Log(Remotion.Logging.LogLevel,System.Nullable{System.Int32},System.Object,System.Exception)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.LogFormat(Remotion.Logging.LogLevel,System.Nullable{System.Int32},System.Exception,System.String,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="eventID"/> is outside the range of an unsigned 16-bit integer. </exception>
        </member>
        <member name="M:Remotion.Logging.Log4NetLog.IsEnabled(Remotion.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="P:Remotion.Logging.Log4NetLog.Logger">
            <summary>
            Gets the <see cref="T:log4net.Core.ILogger"/> used by this <see cref="T:Remotion.Logging.Log4NetLog"/>.
            </summary>
        </member>
        <member name="T:Remotion.Logging.Log4NetLogManager">
            <summary>
            Implementation of <see cref="T:Remotion.Logging.ILogManager"/> for <b>log4net</b>.
            </summary>
        </member>
        <member name="M:Remotion.Logging.Log4NetLogManager.GetLogger(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Remotion.Logging.Log4NetLog"/> type.
            </summary>
            <param name="name">The name of the logger to retrieve. Must not be <see langword="null"/> or empty.</param>
            <returns>A <see cref="T:Remotion.Logging.Log4NetLog"/> for the <paramref name="name"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.Log4NetLogManager.GetLogger(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Remotion.Logging.Log4NetLog"/> type.
            </summary>
            <param name="type">The full name of <paramref name="type"/> will be used as the name of the logger to retrieve. Must not be <see langword="null"/>.</param>
            <returns>A <see cref="T:Remotion.Logging.Log4NetLog"/> for the fully qualified name of the <paramref name="type"/> specified.</returns>
        </member>
        <member name="M:Remotion.Logging.Log4NetLogManager.Initialize">
            <summary>
            Initializes <b>log4net</b> by invoking <see cref="M:log4net.Config.XmlConfigurator.Configure"/>.
            </summary>
        </member>
        <member name="T:Remotion.Logging.Log4NetTraceListener">
            <summary>
            A <see cref="T:System.Diagnostics.TraceListener"/> that directs tracing or debugging output to <b>log4net</b>.
            </summary>
            <remarks>See <see cref="T:System.Diagnostics.TraceSource"/> for information on how to configure a <see cref="T:System.Diagnostics.TraceListener"/>.</remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.Convert(System.Diagnostics.TraceEventType)">
            <summary>
            Converts <see cref="T:System.Diagnostics.TraceEventType"/> to <see cref="T:Remotion.Logging.LogLevel"/>.
            </summary>
            <param name="eventType">The <see cref="T:System.Diagnostics.TraceEventType"/> to be converted.</param>
            <returns>Corresponding <see cref="T:Remotion.Logging.LogLevel"/> needed when logging through the <see cref="T:Remotion.Logging.ILog"/> interface.</returns>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Logging.Log4NetTraceListener"/> class. 
            </summary>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Logging.Log4NetTraceListener"/> class using the specified name. 
            </summary>
            <param name="name">
      The name of the <see cref="T:Remotion.Logging.Log4NetTraceListener"/>.
    </param>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.Write(System.String)">
            <overloads>Writes a message to the <b>log4net</b> log. </overloads>
            <summary>
            Writes a message to the <b>log4net</b> log. 
            </summary>
            <param name="message">A message to write.</param>
            <remarks>
            <see cref="M:Remotion.Logging.Log4NetTraceListener.Write(System.String)"/> does not use <see cref="T:System.Diagnostics.TraceFilter"/>, even though the inherited overloads
            use it; this follows the behavior of the standard <see cref="T:System.Diagnostics.TraceListener"/> implementations like 
            <see cref="T:System.Diagnostics.EventLogTraceListener"/> and <see cref="T:System.Diagnostics.TextWriterTraceListener"/>; 
            this behavior is not explicitely documented for the classes of System.Diagnostics.
            </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.WriteLine(System.String)">
            <overloads>Writes a message to the <b>log4net</b> log. </overloads>
            <summary>
            Writes a message to the <b>log4net</b> log. 
            </summary>
            <param name="message">A message to write.</param>
            <remarks>
            <see cref="M:Remotion.Logging.Log4NetTraceListener.WriteLine(System.String)"/> has identical behavior to <see cref="M:Remotion.Logging.Log4NetTraceListener.Write(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <overloads>Writes trace and event information to the <b>log4net</b> log.</overloads>
            <summary>
            Writes trace and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param><param name="message">A message to write.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param><param name="args">An object array containing zero or more objects to format.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <overloads>Writes trace data to the <b>log4net</b> log. </overloads>
            <summary>
            Writes trace information, a data object and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data to emit.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace information, an array of data objects and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param><param name="id">A numeric identifier for the event.</param>
            <param name="data">An array of objects to emit as data.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="M:Remotion.Logging.Log4NetTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>
            Writes trace information, a message, a related activity identity and event information to the <b>log4net</b> log.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param><param name="id">A numeric identifier for the event.</param><param name="message">A message to write.</param>
            <param name="relatedActivityId">A <see cref="T:System.Guid"/> object identifying a related activity.</param>
            <remarks>The <paramref name="eventCache"/> parameter is not logged, since <b>log4net</b> features can provide the same information.
      As such <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions"/> is not relevant, too. 
      When using a <see cref="T:System.Diagnostics.TraceFilter"/>, <paramref name="eventCache"/> can be used the normal way. 
    </remarks>
        </member>
        <member name="T:Remotion.Collections.Cache`2">
            <summary>
            Implements the <see cref="T:Remotion.Collections.ICache`2"/> interface to provide a simple, dictionary-based cache for values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <remarks>
            It is recommended to use the <see cref="T:Remotion.Collections.CacheFactory"/> type to create instances of the desired cache implementation 
            (e.g. thread-safe implementations, implementations with support for data invalidation, etc).
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Remotion.Collections.NullCache`2">
            <summary>
            This class implements a cache that does not actually cache anything.
            </summary>
            <remarks>
            Use NullCache objects if some code expects an <see cref="T:Remotion.Collections.ICache`2"/> interface, but you don't actually want to use caching.
            </remarks>
        </member>
        <member name="T:Remotion.Collections.NameObjectCollection">
            <summary>
            Case-sensitive name/object dictionary.
            </summary>
        </member>
        <member name="M:Remotion.Collections.NameObjectCollection.Merge(Remotion.Collections.NameObjectCollection,Remotion.Collections.NameObjectCollection)">
            <summary>
            Merges two collections. If a key occurs in both collections, the value of the second collection is taken.
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder">
            <summary>
            Finds assemblies using an <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/> and an <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader"/>. The <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/> is
            used to find a set of root assemblies, the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder"/> automatically traverses the assembly references to (transitively)
            find all referenced assemblies as well. The root assemblies and referenced assemblies are loaded with the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader"/>.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder.#ctor(Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder,Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder"/> class.
            </summary>
            <param name="rootAssemblyFinder">The <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinding.IRootAssemblyFinder"/> to use for finding the root assemblies.</param>
            <param name="assemblyLoader">The <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.IAssemblyLoader"/> to use for loading the assemblies found.</param>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder.FindAssemblies">
            <summary>
            Uses the <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder.RootAssemblyFinder"/> to find root assemblies and returns them together with all directly or indirectly referenced 
            assemblies. The assemblies are loaded via the <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyFinding.AssemblyFinder.AssemblyLoader"/>.
            </summary>
            <returns>The root assemblies and their referenced assemblies.</returns>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService">
            <summary>
            Provides an implementation of the <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> interface that uses an <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService.AssemblyFinder"/> to
            retrieve types. This class is created by <see cref="M:Remotion.Configuration.TypeDiscovery.TypeDiscoveryConfiguration.CreateCustomService"/> in the default configuration and
            is therefore the default <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService"/> provided by <see cref="M:Remotion.Reflection.ContextAwareTypeUtility.GetTypeDiscoveryService"/>
            in the standard context.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService.#ctor(Remotion.Reflection.TypeDiscovery.AssemblyFinding.IAssemblyFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService"/> class with a specific <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService.AssemblyFinder"/>
            instance.
            </summary>
            <param name="assemblyFinder">The assembly finder used by this service instance to retrieve types.</param>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
            <summary>
            Retrieves the list of types available in the assemblies found by the <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService.AssemblyFinder"/> specified in the constructor.
            </summary>
            <param name="baseType">The base type to match. Can be null.</param>
            <param name="excludeGlobalTypes">Indicates whether types from all referenced assemblies should be checked.</param>
            <returns>
            A collection of types that match the criteria specified by baseType and excludeGlobalTypes.
            </returns>
        </member>
        <member name="P:Remotion.Reflection.TypeDiscovery.AssemblyFinderTypeDiscoveryService.AssemblyFinder">
            <summary>
            Gets the assembly finder used by this service to discover types. The service simply returns the types returned by the
            <see cref="M:System.Reflection.Assembly.GetTypes"/> method for the assemblies found by this object.
            </summary>
            <value>The assembly finder used for type discovery.</value>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AttributeAssemblyLoaderFilter">
            <summary>
            Filters the assemblies loaded during type discovery by custom attributes, including only those which have a given attribute defined. 
            Note that the assemblies have to be loaded in memory in order to check whether the attribute is present. This will also lock those assembly 
            files that are rejected.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AttributeAssemblyLoaderFilter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AttributeAssemblyLoaderFilter"/> class.
            </summary>
            <param name="attributeType">The attribute type to filter assemblies with.</param>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AttributeAssemblyLoaderFilter.ShouldConsiderAssembly(System.Reflection.AssemblyName)">
            <summary>
            Always returns <see langword="true"/>; all filtering is performed by <see cref="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AttributeAssemblyLoaderFilter.ShouldIncludeAssembly(System.Reflection.Assembly)"/>.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AttributeAssemblyLoaderFilter.ShouldIncludeAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether the assembly of the given name should be considered for inclusion by the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/>.
            Assemblies are considered only if the assembly has the <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AttributeAssemblyLoaderFilter.AttributeType"/> defined.
            </summary>
            <param name="assembly">The assembly to be checked.</param>
            <returns>
            <see langword="false"/> unless the <paramref name="assembly"/> has the <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AttributeAssemblyLoaderFilter.AttributeType"/> defined.
            </returns>
        </member>
        <member name="P:Remotion.Reflection.TypeDiscovery.AssemblyLoading.AttributeAssemblyLoaderFilter.AttributeType">
            <summary>
            Gets the attribute type used for filtering. Only assemblies that have this attribute defined are included.
            </summary>
            <value>The attribute type used for filtering.</value>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.NonApplicationAssemblyAttribute">
            <summary>
            Causes an assembly to be ignored by <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter"/> (which is used by default by all re-motion components
            performing type discovery, such as re-store and Mixins).
            </summary>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter">
            <summary>
            Filters the assemblies loaded during type discovery by name, excluding those whose names match a given regular expression. Whether to
            match the simple name or the full name can be specified.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.#ctor(System.Text.RegularExpressions.Regex,Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.MatchTargetKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter"/> class.
            </summary>
            <param name="matchExpression">The expression to match against the assembly name.</param>
            <param name="matchTarget">Specifies whether to match the full names or the simple names of assemblies against the 
            <paramref name="matchExpression"/>.</param>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.#ctor(System.String,Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.MatchTargetKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter"/> class.
            </summary>
            <param name="matchExpression">The expression to match against the assembly name. This is converted into a compiled, culture-invariant
            regular expression.</param>
            <param name="matchTarget">Specifies whether to match the full names or the simple names of assemblies against the 
            <paramref name="matchExpression"/>.</param>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.ShouldConsiderAssembly(System.Reflection.AssemblyName)">
            <summary>
            Determines whether the assembly of the given name should be considered for inclusion by the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/>.
            Assemblies are considered only if the assembly name does not match the <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.MatchExpressionString"/>.
            </summary>
            <param name="assemblyName">The name of the assembly to be checked.</param>
            <returns>
            <see langword="true"/> unless the <paramref name="assemblyName"/> matches <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.MatchExpressionString"/>.
            </returns>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.ShouldIncludeAssembly(System.Reflection.Assembly)">
            <summary>
            Always returns <see langword="true"/>; all filtering is performed by <see cref="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.ShouldConsiderAssembly(System.Reflection.AssemblyName)"/>.
            </summary>
        </member>
        <member name="P:Remotion.Reflection.TypeDiscovery.AssemblyLoading.RegexAssemblyLoaderFilter.MatchExpressionString">
            <summary>
            Gets a string representation of the regular expression the assemblies are matched against.
            </summary>
            <value>The match expression string.</value>
        </member>
        <member name="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter">
            <summary>
            Filters the assemblies loaded during type discovery by name, excluding those whose names resemble system assemblies or assemblies
            generated by the mixin engine. In addition, assemblies that have the <see cref="T:Remotion.Reflection.TypeDiscovery.NonApplicationAssemblyAttribute"/> defined are also excluded.
            Note that assemblies have to be loaded in memory in order to check whether the attribute is present. This will also lock the assembly files.
            </summary>
            <remarks>
            The name-based filtering by default excludes the following assembly name patterns:
            <list type="bullet">
              <item>mscorlib</item>
              <item>System</item>
              <item>System\..*</item>
              <item>Microsoft\..*</item>
              <item>Remotion\..*\.Generated\..*</item>
            </list>
            This list might change in the future, and it can be extended via <see cref="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.AddIgnoredAssembly(System.String)"/>.
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.Instance">
            <summary>
            Returns the global instance of this filter. There is only this one instance of the filter in an application.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.Reset">
            <summary>
            Resets the name filter to the default names, removing any that have been added via <see cref="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.AddIgnoredAssembly(System.String)"/>.
            </summary>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.AddIgnoredAssembly(System.String)">
            <summary>
            Adds the given regular expression to the list of assembly names to be excluded.
            </summary>
            <param name="simpleNameRegularExpression">A regular expression matching the simple names of assemblies to be excluded.</param>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.ShouldConsiderAssembly(System.Reflection.AssemblyName)">
            <summary>
            Determines whether the assembly of the given name should be considered for inclusion by the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/>.
            An assembly is only considered for inclusion if it is not identified as a system assembly by matching its name against the 
            <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.SystemAssemblyMatchExpression"/>.
            </summary>
            <param name="assemblyName">The name of the assembly to be checked.</param>
            <returns>
            	<see langword="true"/> unless the <paramref name="assemblyName"/> matches the <see cref="P:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.SystemAssemblyMatchExpression"/>.
            </returns>
            <remarks>This is the first step of a two-step filtering protocol. Assemblies accepted by this method can still be filtered via 
            <see cref="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.ShouldIncludeAssembly(System.Reflection.Assembly)"/>.</remarks>
        </member>
        <member name="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.ShouldIncludeAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether the given assembly should be included in the list of assemblies returned by the <see cref="T:Remotion.Reflection.TypeDiscovery.AssemblyLoading.FilteringAssemblyLoader"/>.
            An assembly is only included if it does not have the <see cref="T:Remotion.Reflection.TypeDiscovery.NonApplicationAssemblyAttribute"/> defined.
            </summary>
            <param name="assembly">The assembly to be checked.</param>
            <returns>
            	<see langword="true"/> unless the <paramref name="assembly"/> has the <see cref="T:Remotion.Reflection.TypeDiscovery.NonApplicationAssemblyAttribute"/> defined.
            </returns>
            <remarks>This is the second step of a two-step filtering protocol. Only assemblies not rejected by <see cref="M:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.ShouldConsiderAssembly(System.Reflection.AssemblyName)"/> are
            passed on to this step.</remarks>
        </member>
        <member name="P:Remotion.Reflection.TypeDiscovery.AssemblyLoading.ApplicationAssemblyLoaderFilter.SystemAssemblyMatchExpression">
            <summary>
            Gets the regular expression string applied to assembly names in order to check whether they are system assemblies.
            </summary>
            <value>The system assembly regular expression string.</value>
        </member>
        <member name="T:Remotion.Reflection.InheritanceHierarchyFilter">
            <summary>
            The <see cref="T:Remotion.Reflection.InheritanceHierarchyFilter"/> can be used to get all leaf classes within a deifned set of types passed into the 
            constructor.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.CultureScope">
            <summary>
            Represents a scope with a specific culture and UI-culture (see <see cref="T:System.Globalization.CultureInfo"/>). 
            </summary>
            <example>
            Set German culture and Russian user-interface-culture for
            for current thread within using-block, automatically restore previously set cultures
            after using-block:
            <code><![CDATA[
            using (new CultureScope ("de","ru"))
            {
              // Do something with German Culture and Russian UI-Culture here
            }
            ]]></code></example>
        </member>
        <member name="M:Remotion.Utilities.CultureScope.CreateInvariantCultureScope">
            <summary>
            Returns an invariant culture scope, i.e. initialized with <see cref="T:System.Globalization.CultureInfo"/> = <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.CultureScope.#ctor(System.String,System.String)">
            <summary>
            Intialize <see cref="T:Remotion.Utilities.CultureScope"/> with culture-names-strings, e.g. "de-AT", "en-GB".
            </summary>
            <param name="cultureName">Culture name string. null to not switch culture.</param>
            <param name="uiCultureName">User interface culture name string. null to not switch UI-culture.</param>
        </member>
        <member name="M:Remotion.Utilities.CultureScope.#ctor(System.String)">
            <summary>
            Intialize both the culture and UI-culture with the same culture-name
            </summary>
            <param name="cultureAndUiCultureName">Culture and User interface culture name string.</param>
        </member>
        <member name="M:Remotion.Utilities.CultureScope.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Intialize <see cref="T:Remotion.Utilities.CultureScope"/> from <see cref="T:System.Globalization.CultureInfo"/> instances.
            </summary>
            <param name="cultureInfo">Culture to use.</param>
            <param name="uiCultureInfo">User interface culture to use.</param>
        </member>
        <member name="T:Remotion.Utilities.DelegateBasedComparer`1">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IComparer`1"/> by calling a <see cref="T:System.Comparison`1"/> delegate.
            </summary>
            <typeparam name="T">The type of the objects to be compared.</typeparam>
        </member>
        <member name="T:Remotion.Utilities.InvertedComparerDecorator`1">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IComparer`1"/> as a decorator that inverts (i.e. flips) the arguments of the <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>
            to invert the result.
            </summary>
            <typeparam name="T">The type of the objects to be compared.</typeparam>
        </member>
        <member name="T:Remotion.Utilities.IUtcNowProvider">
            <summary>
            <see cref="T:Remotion.Utilities.IUtcNowProvider"/> defines an abstraction for clients using the current date and time. Use this to decouple code from the system 
            clock.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.NullComparer`1">
            <summary>
            <see cref="T:Remotion.INullObject"/> implementation for <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Remotion.Utilities.NullValueConverter">
            <summary>
            The <see cref="T:Remotion.Utilities.NullValueConverter"/> can convert "null" between nullable types.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.AttributeRetrieval.PropertyCustomAttributeRetriever">
            <summary>
            Implements <see cref="T:Remotion.Utilities.AttributeRetrieval.InheritanceAwareCustomAttributeRetriever`1"/> for <see cref="T:System.Reflection.PropertyInfo"/> objects.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.ReSharperAnnotations.ReflectionAPIAttribute">
            <summary>
            This attribute is intended to mark API used only via reflection and should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.StopwatchScope">
            <summary>
            Provides a simple way of timing a piece of code wrapped into a <c>using</c> block. At the end of the block or at a checkpoint, an action is 
            performed or a log message written.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.StopwatchScope.CreateScope(Remotion.Utilities.StopwatchScope.MeasurementAction)">
            <summary>
            Creates a <see cref="T:Remotion.Utilities.StopwatchScope"/> that measures the time, executing the given
            <paramref name="action"/> when the scope is disposed or when a <see cref="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)"/> is reached.
            </summary>
            <param name="action">The <see cref="T:Remotion.Utilities.StopwatchScope.MeasurementAction"/> to receive the result. Takes the following arguments: 
            <c>string context, StopwatchScope scope</c>. Use <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedTotal"/> and
            <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedSinceLastCheckpoint"/> to retrieve the elapsed time. When the scope is disposed, the context parameter
            is set to the string "end".
            </param>
            <returns>
            A <see cref="T:Remotion.Utilities.StopwatchScope"/> that measures the time.
            </returns>
        </member>
        <member name="M:Remotion.Utilities.StopwatchScope.CreateScope(System.IO.TextWriter,System.String)">
            <summary>
            Creates a <see cref="T:Remotion.Utilities.StopwatchScope"/> that measures the time, writing the result to the given 
            <paramref name="writer"/> when the scope is disposed or a <see cref="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)"/> is reached.
            </summary>
            <param name="writer">The writer to receive the result.</param>
            <param name="formatString">A string to format the result with. The string can contain the following placeholders:
            <list type="bullet">
            <item>
            <term>{context}</term>
            <description>Replaced with the context string passed to <see cref="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)"/>. At the end of the scope, this is the string "end".</description>
            </item>
            <item>
            <term>{elapsed}</term>
            <description>Replaced with the standard string representation of <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedTotal"/>.</description>
            </item>
            <item>
            <term>{elapsed:ms}</term>
            <description>Replaced with <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedTotal"/>, using <see cref="P:System.TimeSpan.TotalMilliseconds"/> to obtain the 
              number of milliseconds elapsed since the last checkpoint.</description>
            </item>
            <item>
            <term>{elapsedCP}</term>
            <description>Replaced with the standard string representation of <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedSinceLastCheckpoint"/>.</description>
            </item>
            <item>
            <term>{elapsedCP:ms}</term>
            <description>Replaced with <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedSinceLastCheckpoint"/>, using <see cref="P:System.TimeSpan.TotalMilliseconds"/> to obtain the 
              number of milliseconds elapsed since the last checkpoint.</description>
            </item>
            </list>
            </param>
            <returns>A <see cref="T:Remotion.Utilities.StopwatchScope"/> that measures the time and writes it to a <see cref="T:System.IO.TextWriter"/>.</returns>
        </member>
        <member name="M:Remotion.Utilities.StopwatchScope.CreateScope(Remotion.Logging.ILog,Remotion.Logging.LogLevel,System.String)">
            <summary>
            Creates a <see cref="T:Remotion.Utilities.StopwatchScope"/> that measures the time, writing the result to the given
            <paramref name="log"/> when the scope is disposed or a <see cref="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)"/> is reached.
            </summary>
            <param name="log">The <see cref="T:Remotion.Logging.ILog"/> to receive the result.</param>
            <param name="logLevel">The log level to log the result with.</param>
            <param name="formatString">A string to format the result with. The string can contain the following placeholders:
            <list type="bullet">
            <item>
            <term>{context}</term>
            <description>Replaced with the context string passed to <see cref="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)"/>. At the end of the scope, this is the string "end".</description>
            </item>
            <item>
            <term>{elapsed}</term>
            <description>Replaced with the standard string representation of <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedTotal"/>.</description>
            </item>
            <item>
            <term>{elapsed:ms}</term>
            <description>Replaced with <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedTotal"/>, using <see cref="P:System.TimeSpan.TotalMilliseconds"/> to obtain the 
              number of milliseconds elapsed since the last checkpoint.</description>
            </item>
            <item>
            <term>{elapsedCP}</term>
            <description>Replaced with the standard string representation of <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedSinceLastCheckpoint"/>.</description>
            </item>
            <item>
            <term>{elapsedCP:ms}</term>
            <description>Replaced with <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedSinceLastCheckpoint"/>, using <see cref="P:System.TimeSpan.TotalMilliseconds"/> to obtain the 
              number of milliseconds elapsed since the last checkpoint.</description>
            </item>
            </list>
            </param>
            <returns>
            A <see cref="T:Remotion.Utilities.StopwatchScope"/> that measures the time in milliseconds.
            </returns>
        </member>
        <member name="M:Remotion.Utilities.StopwatchScope.CreateScope(System.String)">
            <summary>
            Creates a <see cref="T:Remotion.Utilities.StopwatchScope"/> that measures the time, writing the result to the <see cref="T:System.Console"/> when the scope is disposed or 
            a <see cref="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)"/> is reached.
            </summary>
            <param name="formatString">A string to format the result with. The string can contain the following placeholders:
            <list type="bullet">
            <item>
            <term>{context}</term>
            <description>Replaced with the context string passed to <see cref="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)"/>. At the end of the scope, this is the string "end".</description>
            </item>
            <item>
            <term>{elapsed}</term>
            <description>Replaced with the standard string representation of <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedTotal"/>.</description>
            </item>
            <item>
            <term>{elapsed:ms}</term>
            <description>Replaced with <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedTotal"/>, using <see cref="P:System.TimeSpan.TotalMilliseconds"/> to obtain the 
              number of milliseconds elapsed since the last checkpoint.</description>
            </item>
            <item>
            <term>{elapsedCP}</term>
            <description>Replaced with the standard string representation of <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedSinceLastCheckpoint"/>.</description>
            </item>
            <item>
            <term>{elapsedCP:ms}</term>
            <description>Replaced with <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedSinceLastCheckpoint"/>, using <see cref="P:System.TimeSpan.TotalMilliseconds"/> to obtain the 
              number of milliseconds elapsed since the last checkpoint.</description>
            </item>
            </list>
            </param>
            <returns>
            A <see cref="T:Remotion.Utilities.StopwatchScope"/> that measures the time in milliseconds.
            </returns>
        </member>
        <member name="M:Remotion.Utilities.StopwatchScope.Dispose">
            <summary>
            Stops measuring the time and invokes the time measurement action defined when creating the scope.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)">
            <summary>
            Triggers a checkpoint, invoking the action the time measurement action defined when creating the scope with the given <paramref name="context"/>.
            </summary>
            <param name="context">The context information to pass to the action.</param>
        </member>
        <member name="M:Remotion.Utilities.StopwatchScope.Pause">
            <summary>
            Pauses the time measurement. Resume it with <see cref="M:Remotion.Utilities.StopwatchScope.Resume"/>. If the measurement is already paused, this method does nothing.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.StopwatchScope.Resume">
            <summary>
            Resumes the time measurement after it has been paused with <see cref="M:Remotion.Utilities.StopwatchScope.Pause"/>. If the measurement is not paused, this method does nothing.
            </summary>
        </member>
        <member name="P:Remotion.Utilities.StopwatchScope.ElapsedTotal">
            <summary>
            Gets the time elapsed since the construction of this <see cref="T:Remotion.Utilities.StopwatchScope"/> until now or the point of time where <see cref="M:Remotion.Utilities.StopwatchScope.Dispose"/> 
            was called, whichever occurs first.
            </summary>
            <value>The total elapsed time.</value>
        </member>
        <member name="P:Remotion.Utilities.StopwatchScope.ElapsedSinceLastCheckpoint">
            <summary>
            Gets the time elapsed since the last call to <see cref="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)"/> (or the construction of this <see cref="T:Remotion.Utilities.StopwatchScope"/> if no 
            checkpoint has been created) until now. If the scope has been disposed, this is <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
            <value>The elapsed time since the last checkpoint.</value>
        </member>
        <member name="T:Remotion.Utilities.StopwatchScope.MeasurementAction">
            <summary>
            Defines an action to be called whenever a checkpoint is reached or the <see cref="T:Remotion.Utilities.StopwatchScope"/> is disposed.
            </summary>
            <param name="context">The context in which the action is invoked. This corresponds to the parameter given to 
            <see cref="M:Remotion.Utilities.StopwatchScope.Checkpoint(System.String)"/>.</param>
            <param name="scope">The <see cref="T:Remotion.Utilities.StopwatchScope"/> triggering the action. Use <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedTotal"/> and
            <see cref="P:Remotion.Utilities.StopwatchScope.ElapsedSinceLastCheckpoint"/> to retrieve the elapsed time.</param>
        </member>
        <member name="T:Remotion.Utilities.TypeConverterResult">
            <summary>
            The <see cref="T:Remotion.Utilities.TypeConverterResult"/> structure encapsulates the reult of the <see cref="M:Remotion.Utilities.TypeConversionProvider.GetTypeConverter(System.Type,System.Type)"/>
            method.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.TypeConverterType">
            <summary>
            The <see cref="T:Remotion.Utilities.TypeConverterType"/> enum describes whether a <see cref="T:System.ComponentModel.TypeConverter"/> is to be used fro mthe source or the destination type.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.AdvancedEnumConverter">
            <summary> Specialization of <see cref="T:System.ComponentModel.TypeConverter"/> for conversions from and to <see cref="T:System.Enum"/> types. </summary>
        </member>
        <member name="M:Remotion.Utilities.AdvancedEnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Test: Can convert from <paramref name="sourceType"/> to <see cref="T:System.String"/>? </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="sourceType"> The <see cref="T:System.Type"/> of the value to be converted into an <see cref="T:System.Enum"/> type. </param>
            <returns> <see langword="true"/> if the conversion is supported. </returns>
        </member>
        <member name="M:Remotion.Utilities.AdvancedEnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Test: Can convert from <see cref="T:System.String"/> to <paramref name="destinationType"/>? </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="destinationType"> The <see cref="T:System.Type"/> to convert an <see cref="T:System.Enum"/> value to. </param>
            <returns> <see langword="true"/> if the conversion is supported. </returns>
        </member>
        <member name="M:Remotion.Utilities.AdvancedEnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary> Converts <paramref name="value"/> into an <see cref="T:System.Enum"/> value. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="value"> The source value. </param>
            <returns> An <see cref="T:System.Enum"/> value.  </returns>
            <exception cref="T:System.NotSupportedException"> The conversion could not be performed. </exception>
        </member>
        <member name="M:Remotion.Utilities.AdvancedEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary> Convertes an <see cref="T:System.Enum"/> value into the <paramref name="destinationType"/>. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="value"> The <see cref="T:System.Enum"/> value to be converted. </param>
            <param name="destinationType"> The destination <see cref="T:System.Type"/>. Must not be <see langword="null"/>. </param>
            <returns> An <see cref="T:System.Object"/> that represents the converted value. </returns>
            <exception cref="T:System.NotSupportedException"> The conversion could not be performed. </exception>
        </member>
        <member name="P:Remotion.Utilities.AdvancedEnumConverter.EnumType">
            <summary>
            Gets the <see cref="T:System.Type"/> this converter is associated with, as it was passed to this <see cref="T:Remotion.Utilities.AdvancedEnumConverter"/>'s constructor.
            This can be an <see cref="T:System.Enum"/> type or a nullable <see cref="T:System.Enum"/> type.
            </summary>
            <returns>
            The <see cref="T:System.Type"/> this converter is associated with, as it was passed to this <see cref="T:Remotion.Utilities.AdvancedEnumConverter"/>'s constructor.
            </returns>
        </member>
        <member name="P:Remotion.Utilities.AdvancedEnumConverter.UnderlyingEnumType">
            <summary>
            Gets the <see cref="T:System.Enum"/> <see cref="T:System.Type"/> this converter is associated with. If a nullable type was passed to this 
            <see cref="T:Remotion.Utilities.AdvancedEnumConverter"/>'s constructor, this property returns the actual <see cref="T:System.Enum"/> type underlying the nullable type.
            Otherwise, it returns the same as <see cref="P:Remotion.Utilities.AdvancedEnumConverter.EnumType"/>.
            </summary>
            <returns>
            The <see cref="T:System.Enum"/> <see cref="T:System.Type"/> this converter is associated with.
            </returns>
        </member>
        <member name="P:Remotion.Utilities.AdvancedEnumConverter.IsNullable">
            <summary>
            Gets a value indicating whether this instance is associated with a nullable <see cref="T:System.Enum"/>.
            </summary>
            <returns>
            	<see langword="true"/> if <see cref="P:Remotion.Utilities.AdvancedEnumConverter.EnumType"/> is nullable; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Remotion.Utilities.ArrayUtility">
            <summary>
            Provides utility functions that make common array operations easier.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.BidirectionalStringConverter">
            <summary> Specialization of <see cref="T:System.ComponentModel.TypeConverter"/> for conversions from and to <see cref="T:System.String"/>. </summary>
            <remarks>
              <para>
                Conversions from <see cref="T:System.Single"/> and <see cref="T:System.Double"/> are done using "R" as format string. 
              </para><para>
                Conversion is possible under the following conditions:
              </para>
              <list type="bullet">
                <item>
                  The <see cref="T:System.Type"/> is <see cref="T:System.Guid"/> or <see cref="T:System.DBNull"/>
                </item>
                <item>
                  The <see cref="T:System.Type"/> is an array of scalar values.
                </item>
                <item>
                  A <see cref="T:System.Type"/> implements either a 
                  public <see langword="static"/> &lt;DestinationType&gt; Parse (string) or a 
                  public <see langword="static"/> &lt;DestinationType&gt; Parse (string, IFormatProvider) method.
                </item>
              </list>
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Test: Can convert from <paramref name="sourceType"/> to <see cref="T:System.String"/>? </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="sourceType"> 
              The <see cref="T:System.Type"/> of the value to be converted into a <see cref="T:System.String"/>.
            </param>
            <returns> <see langword="true"/> if the conversion is supported. </returns>
            <remarks>
            In theory, every object can be converted to a string because every object has a <see cref="M:System.Object.ToString"/> method. The 
            <see cref="T:Remotion.Utilities.BidirectionalStringConverter"/>, however, only supports objects for which round-tripping is supported. This method therefore only
            returns <see langword="true"/> for types whose values can be converted both into and back from a string.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Test: Can convert from <see cref="T:System.String"/> to <paramref name="destinationType"/>? </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="destinationType"> The <see cref="T:System.Type"/>  to convert a <see cref="T:System.String"/> value to. </param>
            <returns> <see langword="true"/> if the conversion is supported. </returns>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary> Converts <paramref name="value"/> into a <see cref="T:System.String"/>. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="value">  The source value. </param>
            <returns> A <see cref="T:System.String"/>.  </returns>
            <exception cref="T:System.NotSupportedException"> The conversion could not be performed. </exception>
            <remarks>
              Conversions from <see cref="T:System.Single"/> and <see cref="T:System.Double"/> are done using "R" as format string. 
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary> Convertes a <see cref="T:System.String"/> into the <paramref name="destinationType"/>. </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture"> The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="value"> The <see cref="T:System.String"/> to be converted. </param>
            <param name="destinationType"> The destination <see cref="T:System.Type"/>. Must not be <see langword="null"/>. </param>
            <returns> An <see cref="T:System.Object"/> that represents the converted value. </returns>
            <exception cref="T:System.NotSupportedException"> The conversion could not be performed. </exception>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether the collection of standard values returned by 
              <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list.
            </summary>
            <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <returns> <see langword="false"/>. </returns>
        </member>
        <member name="M:Remotion.Utilities.BidirectionalStringConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary> Returns whether this object supports a standard set of values that can be picked from a list. </summary>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <returns> <see langword="false"/>. </returns>
        </member>
        <member name="T:Remotion.Utilities.EnumUtility">
            <summary>
            This utility class provides methods for dealing with enumeration values.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EnumUtility.IsValidEnumValue(System.Object)">
            <summary>
            Checks whether the specified value is one of the values that the enumeration type defines.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.EnumUtility.IsValidEnumValue(System.Type,System.Object)">
            <summary>
            Checks whether the specified <paramref name="value"/> is one of the values that the <paramref name="enumType"/> defines.
            </summary>
            <remarks>This method corresponds to <see cref="T:System.Enum"/>.<see cref="M:System.Enum.IsDefined(System.Type,System.Object)"/> but can also handls flag-enums.</remarks>
            <exception cref="T:System.ArgumentException">
              <para><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>.</para>
              -or- 
              <para>The type of <paramref name="value"/> is not an <paramref name="enumType"/>.</para>
              -or-
              <para>The type of <paramref name="value"/> is not an underlying type of <paramref name="enumType"/>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              value is not type <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, 
              <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="T:Remotion.Utilities.NameValueCollectionUtility">
            <summary>
              Utility class for <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            </summary>
        </member>
        <member name="M:Remotion.Utilities.NameValueCollectionUtility.Append(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
              Adds the second dictionary to the first. If a key occurs in both dictionaries, the value of the second
              dictionaries is taken.
            </summary>
            <param name="first"> Must not be <see langword="null"/>. </param>
            <param name="second"> Must not be <see langword="null"/>. </param>
        </member>
        <member name="M:Remotion.Utilities.NameValueCollectionUtility.Merge(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
              Merges two collections. If a key occurs in both collections, the value of the second collections is taken.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.ReflectionUtility.CanAscribe(System.Type,System.Type)">
            <summary>
            Evaluates whether the <paramref name="type"/> can be ascribed to the <paramref name="ascribeeType"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check. Must not be <see langword="null"/>.</param>
            <param name="ascribeeType">The <see cref="T:System.Type"/> to check the <paramref name="type"/> against. Must not be <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="type"/> is the <paramref name="ascribeeType"/> or its instantiation, 
            its subclass or the implementation of an interface in case the <paramref name="ascribeeType"/> is an interface.
            </returns>
        </member>
        <member name="M:Remotion.Utilities.ReflectionUtility.GetAscribedGenericArguments(System.Type,System.Type)">
            <summary>
            Returns the type arguments for the ascribed <paramref name="ascribeeType"/> as inherited or implemented by a given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to return the type parameter. Must not be <see langword="null"/>.</param>
            <param name="ascribeeType">The <see cref="T:System.Type"/> to check the <paramref name="type"/> against. Must not be <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Type"/> array containing the generic arguments of the <paramref name="ascribeeType"/> as it is inherited or implemented
            by <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the <paramref name="type"/> is not the <paramref name="ascribeeType"/> or its instantiation, its subclass or the implementation
            of an interface in case the <paramref name="ascribeeType"/> is an interface.
            </exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            Thrown if the <paramref name="type"/> is an interface and implements the interface <paramref name="ascribeeType"/> or its instantiations
            more than once.
            </exception>
        </member>
        <member name="T:Remotion.Utilities.StringUtility">
            <summary>
            Provides utility functions that make common string handling easier.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String,System.Char)">
            <summary>
              Parses a delimiter-separated string into individual elements.
            </summary>
            <remarks>
              This method handles quotes and escaping. A quoted string may contain commas that
              will not be treated as separators. Commas prefixed with a backslash are treated
              like normal commas, double backslashes are treated as single backslashes.
            </remarks>
            <param name="value"> The string to be parsed. Must not be <see langword="null"/>. </param>
            <param name="delimiter"> The character used for list separation. Default is comma (,). </param>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String)">
            <summary>
              Parses a delimiter-separated string into individual elements.
            </summary>
            <remarks>
              This method handles quotes and escaping. A quoted string may contain commas that
              will not be treated as separators. Commas prefixed with a backslash are treated
              like normal commas, double backslashes are treated as single backslashes.
            </remarks>
            <param name="value"> The string to be parsed. Must not be <see langword="null"/>. </param>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String,System.Char,System.Char,System.Char,System.Char,System.String,System.Boolean)">
            <summary>
              Parses a delimiter-separated string into individual elements.
            </summary>
            <remarks>
              This method handles quotes and escaping. A quoted string may contain commas that
              will not be treated as separators. Commas prefixed with a backslash are treated
              like normal commas, double backslashes are treated as single backslashes.
            </remarks>
            <param name="value"> The string to be parsed. Must not be <see langword="null"/>. </param>
            <param name="delimiter"> The character used for list separation. Default is comma (,). </param>
            <param name="openingQuote"> The character used as opening quote. Default is double quote (&quot;). </param>
            <param name="closingQuote"> The character used as closing quote. Default is double quote (&quot;). </param>
            <param name="escapingChar"> The character used to escape quotes and itself. Default is backslash (\). </param>
            <param name="whitespaceCharacters"> A string containing all characters to be considered whitespace. 
              Default is space character only. </param>
            <param name="interpretSpecialCharacters"> If true, the escaping character can be followed by the letters
              r, n or t (case sensitive) for line feeds, new lines or tab characters, respectively. Default is true. </param>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.ParseNewLineSeparatedString(System.String)">
            <summary>
            Splits the input <paramref name="value"/> at the new-line character (LF).
            Carriage-return is trimmed. Empty lines are returned as empty strings in the result
            </summary>
            <param name="value">The input string. Must not be <see langword="null" />.</param>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.AreEqual(System.String,System.String)">
            <summary>
            Compares two strings using the invariant culture.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings using the invariant culture.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.StringUtility.Parse(System.Type,System.String,System.IFormatProvider)">
            <summary>
              Parses the specified type from a string.
            </summary>
            <param name="type"> The type that should be created from the string. This type must have 
              a public <see langword="static"/> <b>Parse</b> method with either no arguments or a single 
              <see cref="T:System.IFormatProvider"/>argument. 
              If <paramref name="type"/> is an array type, the values must be comma-separated. (Escaping is 
              handled as for <see cref="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String,System.Char,System.Char,System.Char,System.Char,System.String,System.Boolean)"/>.) </param>
            <param name="value"> The string value to be parsed. </param>
            <param name="formatProvider"> The format provider to be passed to the type's <b>Parse</b> method (if present). </param>
            <returns> An instance of the specified type. </returns>
            <exception cref="T:Remotion.Utilities.ParseException"> The <b>Parse</b> method was not found, or failed. </exception>
        </member>
        <member name="T:Remotion.Utilities.StringUtility.ParsedItem">
            <summary>
              The result of <see cref="M:Remotion.Utilities.StringUtility.ParseSeparatedList(System.String,System.Char,System.Char,System.Char,System.Char,System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Remotion.Utilities.StringUtility.ParsedItem.Value">
            <summary> The string value at this position. </summary>
        </member>
        <member name="F:Remotion.Utilities.StringUtility.ParsedItem.IsQuoted">
            <summary> An indicator that is <see langword="true" /> if the string at this position was quoted in the input string. </summary>
        </member>
        <member name="T:Remotion.Utilities.TypeConversionProvider">
            <summary> 
              Provides functionality to get the <see cref="T:System.ComponentModel.TypeConverter"/> for a <see cref="T:System.Type"/> and to convert a value
              from a source <see cref="T:System.Type"/> into a destination <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.AddTypeConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary> 
              Registers the <paramref name="converter"/> for the <paramref name="type"/>, overriding the default settings. 
            </summary>
            <param name="type"> 
              The <see cref="T:System.Type"/> for which the <paramref name="converter"/> should be used. 
              Must not be <see langword="null"/>.
            </param>
            <param name="converter"> The <see cref="T:System.ComponentModel.TypeConverter"/> to register. Must not be <see langword="null"/>. </param>
        </member>
        <member name="M:Remotion.Utilities.TypeConversionProvider.RemoveTypeConverter(System.Type)">
            <summary>
              Unregisters a special <see cref="T:System.ComponentModel.TypeConverter"/> previously registered by using <see cref="M:Remotion.Utilities.TypeConversionProvider.AddTypeConverter(System.Type,System.ComponentModel.TypeConverter)"/>.
            </summary>
            <param name="type">
              The <see cref="T:System.Type"/> whose special <see cref="T:System.ComponentModel.TypeConverter"/> should be removed. 
              Must not be <see langword="null"/>.
            </param>
            <remarks> If no <see cref="T:System.ComponentModel.TypeConverter"/> has been registered, the method has no effect. </remarks>
        </member>
        <member name="T:Remotion.Utilities.TypeUtility">
            <summary>
            Utility methods for handling types.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Remotion.Utilities.TypeUtility.s_abbreviationParser">
            <summary>The <see cref="T:System.Lazy`1"/> protects the expensive regex-creation.</summary>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)">
            <summary>
              Converts abbreviated qualified type names into standard qualified type names.
            </summary>
            <remarks>
              Abbreviated type names use the format <c>assemblyname::subnamespace.type</c>. For instance, the
              abbreviated type name <c>"Remotion.Web::Utilities.ControlHelper"</c> would result in the standard
              type name <c>"Remotion.Web.Utilities.ControlHelper, Remotion.Web"</c>.
            </remarks>
            <param name="typeName"> A standard or abbreviated type name. </param>
            <returns> A standard type name as expected by <see cref="M:System.Type.GetType(System.String)"/>. </returns>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.GetType(System.String)">
            <summary>
              Loads a type, optionally using an abbreviated type name as defined in <see cref="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)"/>.
            </summary>
            <remarks>
            This method uses <see cref="T:Remotion.Reflection.ContextAwareTypeUtility"/>. By default, it will search all assemblies for the requested type.
            In the designer context, <see cref="T:System.ComponentModel.Design.IDesignerHost"/> is used for the lookup.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.GetType(System.String,System.Boolean)">
            <summary>
              Loads a type by name, optionally using an abbreviated type name as defined in <see cref="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)"/>.
            </summary>
            <param name="name">
            The name of the type to get. This must follow the conventions of <see cref="M:System.Type.GetType(System.String,System.Boolean)"/>.
            </param>
            <param name="throwOnError">
            If <see langword="true"/>, a <see cref="T:System.TypeLoadException"/> is thrown if the given type cannot be loaded. Otherwise, <see langword="null"/> is returned.
            </param>
            <returns>The type with the given name, retrieved either from the designer or via <see cref="M:System.Type.GetType(System.String,System.Boolean)"/>.</returns>
            <remarks>
            By default, it will search all assemblies for the requested type using <see cref="M:System.Type.GetType(System.String,System.Boolean)"/>. In the designer context 
            (<see cref="P:Remotion.Utilities.DesignerUtility.IsDesignMode"/> is set to <see langword="true"/>), the designer services (<see cref="T:System.ComponentModel.Design.IDesignerHost"/>) are used for the lookup.
            </remarks>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.GetPartialAssemblyQualifiedName(System.Type)">
            <summary>
            Gets the type and assembly name without the version, culture, and public key token.
            </summary>
        </member>
        <member name="M:Remotion.Utilities.TypeUtility.GetAbbreviatedTypeName(System.Type,System.Boolean)">
            <summary>
            Gets the type name in abbreviated syntax (<see cref="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)"/>).
            </summary>
        </member>
        <member name="T:Remotion.Utilities.TypeUtility.AbbreviationParser">
            <summary>
            The implementation of <see cref="M:Remotion.Utilities.TypeUtility.ParseAbbreviatedTypeName(System.String)"/>, implemented in a nested class in order to prevent unnecessary
            initialization of pre-compiled regular expressions.
            </summary>
        </member>
        <member name="T:Remotion.Utilities.UtcNowProvider">
            <summary>
            The <see cref="T:Remotion.Utilities.UtcNowProvider"/> returns the actual date and time.
            </summary>
        </member>
        <member name="M:Remotion.Xml.SchemaLoaderBase.LoadSchemaSet">
            <summary> Gets an <see cref="T:System.Xml.Schema.XmlSchemaSet"/> for the schema specified with property <see cref="P:Remotion.Xml.SchemaLoaderBase.SchemaFile"/> that is embedded in the assembly. </summary>
            <remarks> Overwrite this method if the Schema includes other schemas that need to be loaded first. </remarks>
            <exception cref="T:System.ApplicationException"> Thrown if the schema file could not be loaded. </exception>
        </member>
        <member name="M:Remotion.Xml.SchemaLoaderBase.LoadSchema(System.String)">
            <summary> Gets an <see cref="T:System.Xml.Schema.XmlSchema"/> for a schema embedded in the assembly. </summary>
            <exception cref="T:System.ApplicationException"> Thrown if the schema file could not be loaded. </exception>
        </member>
        <member name="T:Remotion.Xml.XmlSerializationUtility">
            <summary>
            Use this class to easily serialize and deserialize objects to or from XML.
            </summary>
        </member>
        <member name="M:Remotion.Xml.XmlSerializationUtility.GetNamespace(System.Type)">
            <summary>
            Get the Namespace from a type's <see cref="T:System.Xml.Serialization.XmlRootAttribute"/> (preferred) or <see cref="T:System.Xml.Serialization.XmlTypeAttribute"/>.
            </summary>
            <exception cref="T:System.ArgumentException"> Thrown if no namespace is specified through at least one of the possible attributes. </exception>
        </member>
    </members>
</doc>
